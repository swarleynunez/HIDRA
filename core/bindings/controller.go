// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DCRContainerInstance is an auto generated low-level Go binding around an user-defined struct.
type DCRContainerInstance struct {
	Host      common.Address
	StartedAt *big.Int
}

// DELEventReply is an auto generated low-level Go binding around an user-defined struct.
type DELEventReply struct {
	Replier   common.Address
	NodeState string
	Voters    []common.Address
	RepliedAt *big.Int
}

// ControllerMetaData contains all meta data concerning the Controller contract.
var ControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"ApplicationRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"ContainerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"ContainerUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"ContainerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"EventSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"NewEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"RequiredReplies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"RequiredVotes\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"activateContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"apps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unregisteredAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"canSolveEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"initNodeRep\",\"type\":\"int64\"},{\"internalType\":\"uint8\",\"name\":\"nodesThld\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"votesThld\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"ctrs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"autodeployed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unregisteredAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"eType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"sentAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"solvedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"existApplication\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"existContainer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"existEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucet\",\"outputs\":[{\"internalType\":\"contractFaucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveApplications\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveContainers\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"getApplicationContainers\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"getContainerInstances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"internalType\":\"structDCR.ContainerInstance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"getEventReplies\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"replier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeState\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"repliedAt\",\"type\":\"uint256\"}],\"internalType\":\"structDEL.EventReply[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"hasAlreadyReplied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"hasAlreadyVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"reputation\",\"type\":\"int64\"}],\"name\":\"hasNodeReputation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"thld\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"hasRequiredCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"isApplicationActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isApplicationOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"isApplicationUnregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerAutodeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isContainerHost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerInCurrentEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerUnregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"isEventSolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isNodeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"appInfo\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"ctrInfos\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"autodeploy\",\"type\":\"bool\"}],\"name\":\"registerApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"autodeploy\",\"type\":\"bool\"}],\"name\":\"registerContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"specs\",\"type\":\"string\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eType\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_rcid\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_nodeState\",\"type\":\"string\"}],\"name\":\"sendEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_nodeState\",\"type\":\"string\"}],\"name\":\"sendReply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"solveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextEventId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextAppId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextCtrId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"deployedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"unregisterApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"unregisterContainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_info\",\"type\":\"string\"}],\"name\":\"updateContainerInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"candidateAddr\",\"type\":\"address\"}],\"name\":\"voteSolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ControllerMetaData.ABI instead.
var ControllerABI = ControllerMetaData.ABI

// ControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ControllerMetaData.Bin instead.
var ControllerBin = ControllerMetaData.Bin

// DeployController deploys a new Ethereum contract, binding an instance of Controller to it.
func DeployController(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Controller, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ControllerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// Controller is an auto generated Go binding around an Ethereum contract.
type Controller struct {
	ControllerCaller     // Read-only binding to the contract
	ControllerTransactor // Write-only binding to the contract
	ControllerFilterer   // Log filterer for contract events
}

// ControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ControllerSession struct {
	Contract     *Controller       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ControllerCallerSession struct {
	Contract *ControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ControllerTransactorSession struct {
	Contract     *ControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ControllerRaw struct {
	Contract *Controller // Generic contract binding to access the raw methods on
}

// ControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ControllerCallerRaw struct {
	Contract *ControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ControllerTransactorRaw struct {
	Contract *ControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewController creates a new instance of Controller, bound to a specific deployed contract.
func NewController(address common.Address, backend bind.ContractBackend) (*Controller, error) {
	contract, err := bindController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// NewControllerCaller creates a new read-only instance of Controller, bound to a specific deployed contract.
func NewControllerCaller(address common.Address, caller bind.ContractCaller) (*ControllerCaller, error) {
	contract, err := bindController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerCaller{contract: contract}, nil
}

// NewControllerTransactor creates a new write-only instance of Controller, bound to a specific deployed contract.
func NewControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ControllerTransactor, error) {
	contract, err := bindController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerTransactor{contract: contract}, nil
}

// NewControllerFilterer creates a new log filterer instance of Controller, bound to a specific deployed contract.
func NewControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ControllerFilterer, error) {
	contract, err := bindController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ControllerFilterer{contract: contract}, nil
}

// bindController binds a generic wrapper to an already deployed contract.
func bindController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.ControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transact(opts, method, params...)
}

// Apps is a free data retrieval call binding the contract method 0xbfde530d.
//
// Solidity: function apps(uint64 ) view returns(address owner, string info, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCaller) Apps(opts *bind.CallOpts, arg0 uint64) (struct {
	Owner          common.Address
	Info           string
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "apps", arg0)

	outstruct := new(struct {
		Owner          common.Address
		Info           string
		RegisteredAt   *big.Int
		UnregisteredAt *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Info = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.RegisteredAt = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.UnregisteredAt = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Apps is a free data retrieval call binding the contract method 0xbfde530d.
//
// Solidity: function apps(uint64 ) view returns(address owner, string info, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerSession) Apps(arg0 uint64) (struct {
	Owner          common.Address
	Info           string
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Apps(&_Controller.CallOpts, arg0)
}

// Apps is a free data retrieval call binding the contract method 0xbfde530d.
//
// Solidity: function apps(uint64 ) view returns(address owner, string info, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCallerSession) Apps(arg0 uint64) (struct {
	Owner          common.Address
	Info           string
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Apps(&_Controller.CallOpts, arg0)
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) CanSolveEvent(opts *bind.CallOpts, eid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "canSolveEvent", eid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) CanSolveEvent(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.CanSolveEvent(&_Controller.CallOpts, eid, nodeAddr)
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) CanSolveEvent(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.CanSolveEvent(&_Controller.CallOpts, eid, nodeAddr)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(int64 initNodeRep, uint8 nodesThld, uint8 votesThld)
func (_Controller *ControllerCaller) Config(opts *bind.CallOpts) (struct {
	InitNodeRep int64
	NodesThld   uint8
	VotesThld   uint8
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		InitNodeRep int64
		NodesThld   uint8
		VotesThld   uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.InitNodeRep = *abi.ConvertType(out[0], new(int64)).(*int64)
	outstruct.NodesThld = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.VotesThld = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(int64 initNodeRep, uint8 nodesThld, uint8 votesThld)
func (_Controller *ControllerSession) Config() (struct {
	InitNodeRep int64
	NodesThld   uint8
	VotesThld   uint8
}, error) {
	return _Controller.Contract.Config(&_Controller.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(int64 initNodeRep, uint8 nodesThld, uint8 votesThld)
func (_Controller *ControllerCallerSession) Config() (struct {
	InitNodeRep int64
	NodesThld   uint8
	VotesThld   uint8
}, error) {
	return _Controller.Contract.Config(&_Controller.CallOpts)
}

// Ctrs is a free data retrieval call binding the contract method 0x9cc4dc03.
//
// Solidity: function ctrs(uint64 ) view returns(uint64 appid, string info, bool autodeployed, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCaller) Ctrs(opts *bind.CallOpts, arg0 uint64) (struct {
	Appid          uint64
	Info           string
	Autodeployed   bool
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "ctrs", arg0)

	outstruct := new(struct {
		Appid          uint64
		Info           string
		Autodeployed   bool
		RegisteredAt   *big.Int
		UnregisteredAt *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Appid = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.Info = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Autodeployed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.RegisteredAt = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.UnregisteredAt = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Ctrs is a free data retrieval call binding the contract method 0x9cc4dc03.
//
// Solidity: function ctrs(uint64 ) view returns(uint64 appid, string info, bool autodeployed, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerSession) Ctrs(arg0 uint64) (struct {
	Appid          uint64
	Info           string
	Autodeployed   bool
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Ctrs(&_Controller.CallOpts, arg0)
}

// Ctrs is a free data retrieval call binding the contract method 0x9cc4dc03.
//
// Solidity: function ctrs(uint64 ) view returns(uint64 appid, string info, bool autodeployed, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCallerSession) Ctrs(arg0 uint64) (struct {
	Appid          uint64
	Info           string
	Autodeployed   bool
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Ctrs(&_Controller.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) view returns(string eType, address sender, address solver, uint64 rcid, uint256 sentAt, uint256 solvedAt)
func (_Controller *ControllerCaller) Events(opts *bind.CallOpts, arg0 uint64) (struct {
	EType    string
	Sender   common.Address
	Solver   common.Address
	Rcid     uint64
	SentAt   *big.Int
	SolvedAt *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "events", arg0)

	outstruct := new(struct {
		EType    string
		Sender   common.Address
		Solver   common.Address
		Rcid     uint64
		SentAt   *big.Int
		SolvedAt *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Sender = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Solver = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Rcid = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.SentAt = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)
	outstruct.SolvedAt = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) view returns(string eType, address sender, address solver, uint64 rcid, uint256 sentAt, uint256 solvedAt)
func (_Controller *ControllerSession) Events(arg0 uint64) (struct {
	EType    string
	Sender   common.Address
	Solver   common.Address
	Rcid     uint64
	SentAt   *big.Int
	SolvedAt *big.Int
}, error) {
	return _Controller.Contract.Events(&_Controller.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) view returns(string eType, address sender, address solver, uint64 rcid, uint256 sentAt, uint256 solvedAt)
func (_Controller *ControllerCallerSession) Events(arg0 uint64) (struct {
	EType    string
	Sender   common.Address
	Solver   common.Address
	Rcid     uint64
	SentAt   *big.Int
	SolvedAt *big.Int
}, error) {
	return _Controller.Contract.Events(&_Controller.CallOpts, arg0)
}

// ExistApplication is a free data retrieval call binding the contract method 0x801e37c0.
//
// Solidity: function existApplication(uint64 appid) view returns(bool)
func (_Controller *ControllerCaller) ExistApplication(opts *bind.CallOpts, appid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "existApplication", appid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistApplication is a free data retrieval call binding the contract method 0x801e37c0.
//
// Solidity: function existApplication(uint64 appid) view returns(bool)
func (_Controller *ControllerSession) ExistApplication(appid uint64) (bool, error) {
	return _Controller.Contract.ExistApplication(&_Controller.CallOpts, appid)
}

// ExistApplication is a free data retrieval call binding the contract method 0x801e37c0.
//
// Solidity: function existApplication(uint64 appid) view returns(bool)
func (_Controller *ControllerCallerSession) ExistApplication(appid uint64) (bool, error) {
	return _Controller.Contract.ExistApplication(&_Controller.CallOpts, appid)
}

// ExistContainer is a free data retrieval call binding the contract method 0xd9d12491.
//
// Solidity: function existContainer(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) ExistContainer(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "existContainer", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistContainer is a free data retrieval call binding the contract method 0xd9d12491.
//
// Solidity: function existContainer(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) ExistContainer(rcid uint64) (bool, error) {
	return _Controller.Contract.ExistContainer(&_Controller.CallOpts, rcid)
}

// ExistContainer is a free data retrieval call binding the contract method 0xd9d12491.
//
// Solidity: function existContainer(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) ExistContainer(rcid uint64) (bool, error) {
	return _Controller.Contract.ExistContainer(&_Controller.CallOpts, rcid)
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eid) view returns(bool)
func (_Controller *ControllerCaller) ExistEvent(opts *bind.CallOpts, eid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "existEvent", eid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eid) view returns(bool)
func (_Controller *ControllerSession) ExistEvent(eid uint64) (bool, error) {
	return _Controller.Contract.ExistEvent(&_Controller.CallOpts, eid)
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eid) view returns(bool)
func (_Controller *ControllerCallerSession) ExistEvent(eid uint64) (bool, error) {
	return _Controller.Contract.ExistEvent(&_Controller.CallOpts, eid)
}

// Faucet is a free data retrieval call binding the contract method 0xde5f72fd.
//
// Solidity: function faucet() view returns(address)
func (_Controller *ControllerCaller) Faucet(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "faucet")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Faucet is a free data retrieval call binding the contract method 0xde5f72fd.
//
// Solidity: function faucet() view returns(address)
func (_Controller *ControllerSession) Faucet() (common.Address, error) {
	return _Controller.Contract.Faucet(&_Controller.CallOpts)
}

// Faucet is a free data retrieval call binding the contract method 0xde5f72fd.
//
// Solidity: function faucet() view returns(address)
func (_Controller *ControllerCallerSession) Faucet() (common.Address, error) {
	return _Controller.Contract.Faucet(&_Controller.CallOpts)
}

// GetActiveApplications is a free data retrieval call binding the contract method 0x935ef3ad.
//
// Solidity: function getActiveApplications() view returns(uint64[])
func (_Controller *ControllerCaller) GetActiveApplications(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getActiveApplications")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetActiveApplications is a free data retrieval call binding the contract method 0x935ef3ad.
//
// Solidity: function getActiveApplications() view returns(uint64[])
func (_Controller *ControllerSession) GetActiveApplications() ([]uint64, error) {
	return _Controller.Contract.GetActiveApplications(&_Controller.CallOpts)
}

// GetActiveApplications is a free data retrieval call binding the contract method 0x935ef3ad.
//
// Solidity: function getActiveApplications() view returns(uint64[])
func (_Controller *ControllerCallerSession) GetActiveApplications() ([]uint64, error) {
	return _Controller.Contract.GetActiveApplications(&_Controller.CallOpts)
}

// GetActiveContainers is a free data retrieval call binding the contract method 0x087e9448.
//
// Solidity: function getActiveContainers() view returns(uint64[])
func (_Controller *ControllerCaller) GetActiveContainers(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getActiveContainers")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetActiveContainers is a free data retrieval call binding the contract method 0x087e9448.
//
// Solidity: function getActiveContainers() view returns(uint64[])
func (_Controller *ControllerSession) GetActiveContainers() ([]uint64, error) {
	return _Controller.Contract.GetActiveContainers(&_Controller.CallOpts)
}

// GetActiveContainers is a free data retrieval call binding the contract method 0x087e9448.
//
// Solidity: function getActiveContainers() view returns(uint64[])
func (_Controller *ControllerCallerSession) GetActiveContainers() ([]uint64, error) {
	return _Controller.Contract.GetActiveContainers(&_Controller.CallOpts)
}

// GetApplicationContainers is a free data retrieval call binding the contract method 0x934557b7.
//
// Solidity: function getApplicationContainers(uint64 appid) view returns(uint64[])
func (_Controller *ControllerCaller) GetApplicationContainers(opts *bind.CallOpts, appid uint64) ([]uint64, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getApplicationContainers", appid)

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetApplicationContainers is a free data retrieval call binding the contract method 0x934557b7.
//
// Solidity: function getApplicationContainers(uint64 appid) view returns(uint64[])
func (_Controller *ControllerSession) GetApplicationContainers(appid uint64) ([]uint64, error) {
	return _Controller.Contract.GetApplicationContainers(&_Controller.CallOpts, appid)
}

// GetApplicationContainers is a free data retrieval call binding the contract method 0x934557b7.
//
// Solidity: function getApplicationContainers(uint64 appid) view returns(uint64[])
func (_Controller *ControllerCallerSession) GetApplicationContainers(appid uint64) ([]uint64, error) {
	return _Controller.Contract.GetApplicationContainers(&_Controller.CallOpts, appid)
}

// GetContainerInstances is a free data retrieval call binding the contract method 0xb099ab69.
//
// Solidity: function getContainerInstances(uint64 rcid) view returns((address,uint256)[])
func (_Controller *ControllerCaller) GetContainerInstances(opts *bind.CallOpts, rcid uint64) ([]DCRContainerInstance, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getContainerInstances", rcid)

	if err != nil {
		return *new([]DCRContainerInstance), err
	}

	out0 := *abi.ConvertType(out[0], new([]DCRContainerInstance)).(*[]DCRContainerInstance)

	return out0, err

}

// GetContainerInstances is a free data retrieval call binding the contract method 0xb099ab69.
//
// Solidity: function getContainerInstances(uint64 rcid) view returns((address,uint256)[])
func (_Controller *ControllerSession) GetContainerInstances(rcid uint64) ([]DCRContainerInstance, error) {
	return _Controller.Contract.GetContainerInstances(&_Controller.CallOpts, rcid)
}

// GetContainerInstances is a free data retrieval call binding the contract method 0xb099ab69.
//
// Solidity: function getContainerInstances(uint64 rcid) view returns((address,uint256)[])
func (_Controller *ControllerCallerSession) GetContainerInstances(rcid uint64) ([]DCRContainerInstance, error) {
	return _Controller.Contract.GetContainerInstances(&_Controller.CallOpts, rcid)
}

// GetEventReplies is a free data retrieval call binding the contract method 0xe2ded68b.
//
// Solidity: function getEventReplies(uint64 eid) view returns((address,string,address[],uint256)[])
func (_Controller *ControllerCaller) GetEventReplies(opts *bind.CallOpts, eid uint64) ([]DELEventReply, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getEventReplies", eid)

	if err != nil {
		return *new([]DELEventReply), err
	}

	out0 := *abi.ConvertType(out[0], new([]DELEventReply)).(*[]DELEventReply)

	return out0, err

}

// GetEventReplies is a free data retrieval call binding the contract method 0xe2ded68b.
//
// Solidity: function getEventReplies(uint64 eid) view returns((address,string,address[],uint256)[])
func (_Controller *ControllerSession) GetEventReplies(eid uint64) ([]DELEventReply, error) {
	return _Controller.Contract.GetEventReplies(&_Controller.CallOpts, eid)
}

// GetEventReplies is a free data retrieval call binding the contract method 0xe2ded68b.
//
// Solidity: function getEventReplies(uint64 eid) view returns((address,string,address[],uint256)[])
func (_Controller *ControllerCallerSession) GetEventReplies(eid uint64) ([]DELEventReply, error) {
	return _Controller.Contract.GetEventReplies(&_Controller.CallOpts, eid)
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) HasAlreadyReplied(opts *bind.CallOpts, eid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasAlreadyReplied", eid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) HasAlreadyReplied(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyReplied(&_Controller.CallOpts, eid, nodeAddr)
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) HasAlreadyReplied(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyReplied(&_Controller.CallOpts, eid, nodeAddr)
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) HasAlreadyVoted(opts *bind.CallOpts, eid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasAlreadyVoted", eid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) HasAlreadyVoted(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyVoted(&_Controller.CallOpts, eid, nodeAddr)
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) HasAlreadyVoted(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyVoted(&_Controller.CallOpts, eid, nodeAddr)
}

// HasNodeReputation is a free data retrieval call binding the contract method 0xf8b05eb4.
//
// Solidity: function hasNodeReputation(address nodeAddr, int64 reputation) view returns(bool)
func (_Controller *ControllerCaller) HasNodeReputation(opts *bind.CallOpts, nodeAddr common.Address, reputation int64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasNodeReputation", nodeAddr, reputation)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasNodeReputation is a free data retrieval call binding the contract method 0xf8b05eb4.
//
// Solidity: function hasNodeReputation(address nodeAddr, int64 reputation) view returns(bool)
func (_Controller *ControllerSession) HasNodeReputation(nodeAddr common.Address, reputation int64) (bool, error) {
	return _Controller.Contract.HasNodeReputation(&_Controller.CallOpts, nodeAddr, reputation)
}

// HasNodeReputation is a free data retrieval call binding the contract method 0xf8b05eb4.
//
// Solidity: function hasNodeReputation(address nodeAddr, int64 reputation) view returns(bool)
func (_Controller *ControllerCallerSession) HasNodeReputation(nodeAddr common.Address, reputation int64) (bool, error) {
	return _Controller.Contract.HasNodeReputation(&_Controller.CallOpts, nodeAddr, reputation)
}

// HasRequiredCount is a free data retrieval call binding the contract method 0x8a36c7ff.
//
// Solidity: function hasRequiredCount(uint8 thld, uint64 count) view returns(bool)
func (_Controller *ControllerCaller) HasRequiredCount(opts *bind.CallOpts, thld uint8, count uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasRequiredCount", thld, count)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRequiredCount is a free data retrieval call binding the contract method 0x8a36c7ff.
//
// Solidity: function hasRequiredCount(uint8 thld, uint64 count) view returns(bool)
func (_Controller *ControllerSession) HasRequiredCount(thld uint8, count uint64) (bool, error) {
	return _Controller.Contract.HasRequiredCount(&_Controller.CallOpts, thld, count)
}

// HasRequiredCount is a free data retrieval call binding the contract method 0x8a36c7ff.
//
// Solidity: function hasRequiredCount(uint8 thld, uint64 count) view returns(bool)
func (_Controller *ControllerCallerSession) HasRequiredCount(thld uint8, count uint64) (bool, error) {
	return _Controller.Contract.HasRequiredCount(&_Controller.CallOpts, thld, count)
}

// IsApplicationActive is a free data retrieval call binding the contract method 0xdea65678.
//
// Solidity: function isApplicationActive(uint64 appid) view returns(bool)
func (_Controller *ControllerCaller) IsApplicationActive(opts *bind.CallOpts, appid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isApplicationActive", appid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApplicationActive is a free data retrieval call binding the contract method 0xdea65678.
//
// Solidity: function isApplicationActive(uint64 appid) view returns(bool)
func (_Controller *ControllerSession) IsApplicationActive(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationActive(&_Controller.CallOpts, appid)
}

// IsApplicationActive is a free data retrieval call binding the contract method 0xdea65678.
//
// Solidity: function isApplicationActive(uint64 appid) view returns(bool)
func (_Controller *ControllerCallerSession) IsApplicationActive(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationActive(&_Controller.CallOpts, appid)
}

// IsApplicationOwner is a free data retrieval call binding the contract method 0x938ea596.
//
// Solidity: function isApplicationOwner(uint64 appid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) IsApplicationOwner(opts *bind.CallOpts, appid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isApplicationOwner", appid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApplicationOwner is a free data retrieval call binding the contract method 0x938ea596.
//
// Solidity: function isApplicationOwner(uint64 appid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) IsApplicationOwner(appid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsApplicationOwner(&_Controller.CallOpts, appid, nodeAddr)
}

// IsApplicationOwner is a free data retrieval call binding the contract method 0x938ea596.
//
// Solidity: function isApplicationOwner(uint64 appid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) IsApplicationOwner(appid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsApplicationOwner(&_Controller.CallOpts, appid, nodeAddr)
}

// IsApplicationUnregistered is a free data retrieval call binding the contract method 0x90d8229c.
//
// Solidity: function isApplicationUnregistered(uint64 appid) view returns(bool)
func (_Controller *ControllerCaller) IsApplicationUnregistered(opts *bind.CallOpts, appid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isApplicationUnregistered", appid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApplicationUnregistered is a free data retrieval call binding the contract method 0x90d8229c.
//
// Solidity: function isApplicationUnregistered(uint64 appid) view returns(bool)
func (_Controller *ControllerSession) IsApplicationUnregistered(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationUnregistered(&_Controller.CallOpts, appid)
}

// IsApplicationUnregistered is a free data retrieval call binding the contract method 0x90d8229c.
//
// Solidity: function isApplicationUnregistered(uint64 appid) view returns(bool)
func (_Controller *ControllerCallerSession) IsApplicationUnregistered(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationUnregistered(&_Controller.CallOpts, appid)
}

// IsContainerActive is a free data retrieval call binding the contract method 0xa168a279.
//
// Solidity: function isContainerActive(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerActive(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerActive", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerActive is a free data retrieval call binding the contract method 0xa168a279.
//
// Solidity: function isContainerActive(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerActive(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerActive(&_Controller.CallOpts, rcid)
}

// IsContainerActive is a free data retrieval call binding the contract method 0xa168a279.
//
// Solidity: function isContainerActive(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerActive(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerActive(&_Controller.CallOpts, rcid)
}

// IsContainerAutodeployed is a free data retrieval call binding the contract method 0xc786e940.
//
// Solidity: function isContainerAutodeployed(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerAutodeployed(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerAutodeployed", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerAutodeployed is a free data retrieval call binding the contract method 0xc786e940.
//
// Solidity: function isContainerAutodeployed(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerAutodeployed(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerAutodeployed(&_Controller.CallOpts, rcid)
}

// IsContainerAutodeployed is a free data retrieval call binding the contract method 0xc786e940.
//
// Solidity: function isContainerAutodeployed(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerAutodeployed(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerAutodeployed(&_Controller.CallOpts, rcid)
}

// IsContainerHost is a free data retrieval call binding the contract method 0xd4d458a2.
//
// Solidity: function isContainerHost(uint64 rcid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) IsContainerHost(opts *bind.CallOpts, rcid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerHost", rcid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerHost is a free data retrieval call binding the contract method 0xd4d458a2.
//
// Solidity: function isContainerHost(uint64 rcid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) IsContainerHost(rcid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsContainerHost(&_Controller.CallOpts, rcid, nodeAddr)
}

// IsContainerHost is a free data retrieval call binding the contract method 0xd4d458a2.
//
// Solidity: function isContainerHost(uint64 rcid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerHost(rcid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsContainerHost(&_Controller.CallOpts, rcid, nodeAddr)
}

// IsContainerInCurrentEvent is a free data retrieval call binding the contract method 0xb8e600c0.
//
// Solidity: function isContainerInCurrentEvent(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerInCurrentEvent(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerInCurrentEvent", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerInCurrentEvent is a free data retrieval call binding the contract method 0xb8e600c0.
//
// Solidity: function isContainerInCurrentEvent(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerInCurrentEvent(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerInCurrentEvent(&_Controller.CallOpts, rcid)
}

// IsContainerInCurrentEvent is a free data retrieval call binding the contract method 0xb8e600c0.
//
// Solidity: function isContainerInCurrentEvent(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerInCurrentEvent(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerInCurrentEvent(&_Controller.CallOpts, rcid)
}

// IsContainerUnregistered is a free data retrieval call binding the contract method 0x8f784dbe.
//
// Solidity: function isContainerUnregistered(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerUnregistered(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerUnregistered", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerUnregistered is a free data retrieval call binding the contract method 0x8f784dbe.
//
// Solidity: function isContainerUnregistered(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerUnregistered(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerUnregistered(&_Controller.CallOpts, rcid)
}

// IsContainerUnregistered is a free data retrieval call binding the contract method 0x8f784dbe.
//
// Solidity: function isContainerUnregistered(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerUnregistered(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerUnregistered(&_Controller.CallOpts, rcid)
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eid) view returns(bool)
func (_Controller *ControllerCaller) IsEventSolved(opts *bind.CallOpts, eid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isEventSolved", eid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eid) view returns(bool)
func (_Controller *ControllerSession) IsEventSolved(eid uint64) (bool, error) {
	return _Controller.Contract.IsEventSolved(&_Controller.CallOpts, eid)
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eid) view returns(bool)
func (_Controller *ControllerCallerSession) IsEventSolved(eid uint64) (bool, error) {
	return _Controller.Contract.IsEventSolved(&_Controller.CallOpts, eid)
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) IsNodeRegistered(opts *bind.CallOpts, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isNodeRegistered", nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) IsNodeRegistered(nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsNodeRegistered(&_Controller.CallOpts, nodeAddr)
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) IsNodeRegistered(nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsNodeRegistered(&_Controller.CallOpts, nodeAddr)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_Controller *ControllerCaller) Nodes(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "nodes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_Controller *ControllerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _Controller.Contract.Nodes(&_Controller.CallOpts, arg0)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_Controller *ControllerCallerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _Controller.Contract.Nodes(&_Controller.CallOpts, arg0)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint64 nodeCount, uint64 nextEventId, uint64 nextAppId, uint64 nextCtrId, uint256 deployedAt)
func (_Controller *ControllerCaller) State(opts *bind.CallOpts) (struct {
	NodeCount   uint64
	NextEventId uint64
	NextAppId   uint64
	NextCtrId   uint64
	DeployedAt  *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "state")

	outstruct := new(struct {
		NodeCount   uint64
		NextEventId uint64
		NextAppId   uint64
		NextCtrId   uint64
		DeployedAt  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NodeCount = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.NextEventId = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.NextAppId = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.NextCtrId = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.DeployedAt = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint64 nodeCount, uint64 nextEventId, uint64 nextAppId, uint64 nextCtrId, uint256 deployedAt)
func (_Controller *ControllerSession) State() (struct {
	NodeCount   uint64
	NextEventId uint64
	NextAppId   uint64
	NextCtrId   uint64
	DeployedAt  *big.Int
}, error) {
	return _Controller.Contract.State(&_Controller.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint64 nodeCount, uint64 nextEventId, uint64 nextAppId, uint64 nextCtrId, uint256 deployedAt)
func (_Controller *ControllerCallerSession) State() (struct {
	NodeCount   uint64
	NextEventId uint64
	NextAppId   uint64
	NextCtrId   uint64
	DeployedAt  *big.Int
}, error) {
	return _Controller.Contract.State(&_Controller.CallOpts)
}

// ActivateContainer is a paid mutator transaction binding the contract method 0x64bfcb70.
//
// Solidity: function activateContainer(uint64 rcid) returns()
func (_Controller *ControllerTransactor) ActivateContainer(opts *bind.TransactOpts, rcid uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "activateContainer", rcid)
}

// ActivateContainer is a paid mutator transaction binding the contract method 0x64bfcb70.
//
// Solidity: function activateContainer(uint64 rcid) returns()
func (_Controller *ControllerSession) ActivateContainer(rcid uint64) (*types.Transaction, error) {
	return _Controller.Contract.ActivateContainer(&_Controller.TransactOpts, rcid)
}

// ActivateContainer is a paid mutator transaction binding the contract method 0x64bfcb70.
//
// Solidity: function activateContainer(uint64 rcid) returns()
func (_Controller *ControllerTransactorSession) ActivateContainer(rcid uint64) (*types.Transaction, error) {
	return _Controller.Contract.ActivateContainer(&_Controller.TransactOpts, rcid)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0xc51b7ef7.
//
// Solidity: function registerApplication(string appInfo, string[] ctrInfos, bool autodeploy) returns()
func (_Controller *ControllerTransactor) RegisterApplication(opts *bind.TransactOpts, appInfo string, ctrInfos []string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "registerApplication", appInfo, ctrInfos, autodeploy)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0xc51b7ef7.
//
// Solidity: function registerApplication(string appInfo, string[] ctrInfos, bool autodeploy) returns()
func (_Controller *ControllerSession) RegisterApplication(appInfo string, ctrInfos []string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.Contract.RegisterApplication(&_Controller.TransactOpts, appInfo, ctrInfos, autodeploy)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0xc51b7ef7.
//
// Solidity: function registerApplication(string appInfo, string[] ctrInfos, bool autodeploy) returns()
func (_Controller *ControllerTransactorSession) RegisterApplication(appInfo string, ctrInfos []string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.Contract.RegisterApplication(&_Controller.TransactOpts, appInfo, ctrInfos, autodeploy)
}

// RegisterContainer is a paid mutator transaction binding the contract method 0xd9e7c1fc.
//
// Solidity: function registerContainer(uint64 appid, string info, bool autodeploy) returns()
func (_Controller *ControllerTransactor) RegisterContainer(opts *bind.TransactOpts, appid uint64, info string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "registerContainer", appid, info, autodeploy)
}

// RegisterContainer is a paid mutator transaction binding the contract method 0xd9e7c1fc.
//
// Solidity: function registerContainer(uint64 appid, string info, bool autodeploy) returns()
func (_Controller *ControllerSession) RegisterContainer(appid uint64, info string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.Contract.RegisterContainer(&_Controller.TransactOpts, appid, info, autodeploy)
}

// RegisterContainer is a paid mutator transaction binding the contract method 0xd9e7c1fc.
//
// Solidity: function registerContainer(uint64 appid, string info, bool autodeploy) returns()
func (_Controller *ControllerTransactorSession) RegisterContainer(appid uint64, info string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.Contract.RegisterContainer(&_Controller.TransactOpts, appid, info, autodeploy)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerTransactor) RegisterNode(opts *bind.TransactOpts, specs string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "registerNode", specs)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerSession) RegisterNode(specs string) (*types.Transaction, error) {
	return _Controller.Contract.RegisterNode(&_Controller.TransactOpts, specs)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerTransactorSession) RegisterNode(specs string) (*types.Transaction, error) {
	return _Controller.Contract.RegisterNode(&_Controller.TransactOpts, specs)
}

// SendEvent is a paid mutator transaction binding the contract method 0xe5462fc0.
//
// Solidity: function sendEvent(string _eType, uint64 _rcid, string _nodeState) returns()
func (_Controller *ControllerTransactor) SendEvent(opts *bind.TransactOpts, _eType string, _rcid uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "sendEvent", _eType, _rcid, _nodeState)
}

// SendEvent is a paid mutator transaction binding the contract method 0xe5462fc0.
//
// Solidity: function sendEvent(string _eType, uint64 _rcid, string _nodeState) returns()
func (_Controller *ControllerSession) SendEvent(_eType string, _rcid uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.Contract.SendEvent(&_Controller.TransactOpts, _eType, _rcid, _nodeState)
}

// SendEvent is a paid mutator transaction binding the contract method 0xe5462fc0.
//
// Solidity: function sendEvent(string _eType, uint64 _rcid, string _nodeState) returns()
func (_Controller *ControllerTransactorSession) SendEvent(_eType string, _rcid uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.Contract.SendEvent(&_Controller.TransactOpts, _eType, _rcid, _nodeState)
}

// SendReply is a paid mutator transaction binding the contract method 0xe993aebb.
//
// Solidity: function sendReply(uint64 eid, string _nodeState) returns()
func (_Controller *ControllerTransactor) SendReply(opts *bind.TransactOpts, eid uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "sendReply", eid, _nodeState)
}

// SendReply is a paid mutator transaction binding the contract method 0xe993aebb.
//
// Solidity: function sendReply(uint64 eid, string _nodeState) returns()
func (_Controller *ControllerSession) SendReply(eid uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.Contract.SendReply(&_Controller.TransactOpts, eid, _nodeState)
}

// SendReply is a paid mutator transaction binding the contract method 0xe993aebb.
//
// Solidity: function sendReply(uint64 eid, string _nodeState) returns()
func (_Controller *ControllerTransactorSession) SendReply(eid uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.Contract.SendReply(&_Controller.TransactOpts, eid, _nodeState)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x83038ac2.
//
// Solidity: function solveEvent(uint64 eid) returns()
func (_Controller *ControllerTransactor) SolveEvent(opts *bind.TransactOpts, eid uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "solveEvent", eid)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x83038ac2.
//
// Solidity: function solveEvent(uint64 eid) returns()
func (_Controller *ControllerSession) SolveEvent(eid uint64) (*types.Transaction, error) {
	return _Controller.Contract.SolveEvent(&_Controller.TransactOpts, eid)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x83038ac2.
//
// Solidity: function solveEvent(uint64 eid) returns()
func (_Controller *ControllerTransactorSession) SolveEvent(eid uint64) (*types.Transaction, error) {
	return _Controller.Contract.SolveEvent(&_Controller.TransactOpts, eid)
}

// UnregisterApplication is a paid mutator transaction binding the contract method 0xf2a28e24.
//
// Solidity: function unregisterApplication(uint64 appid) returns()
func (_Controller *ControllerTransactor) UnregisterApplication(opts *bind.TransactOpts, appid uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "unregisterApplication", appid)
}

// UnregisterApplication is a paid mutator transaction binding the contract method 0xf2a28e24.
//
// Solidity: function unregisterApplication(uint64 appid) returns()
func (_Controller *ControllerSession) UnregisterApplication(appid uint64) (*types.Transaction, error) {
	return _Controller.Contract.UnregisterApplication(&_Controller.TransactOpts, appid)
}

// UnregisterApplication is a paid mutator transaction binding the contract method 0xf2a28e24.
//
// Solidity: function unregisterApplication(uint64 appid) returns()
func (_Controller *ControllerTransactorSession) UnregisterApplication(appid uint64) (*types.Transaction, error) {
	return _Controller.Contract.UnregisterApplication(&_Controller.TransactOpts, appid)
}

// UnregisterContainer is a paid mutator transaction binding the contract method 0x98480e2b.
//
// Solidity: function unregisterContainer(uint64 rcid) returns()
func (_Controller *ControllerTransactor) UnregisterContainer(opts *bind.TransactOpts, rcid uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "unregisterContainer", rcid)
}

// UnregisterContainer is a paid mutator transaction binding the contract method 0x98480e2b.
//
// Solidity: function unregisterContainer(uint64 rcid) returns()
func (_Controller *ControllerSession) UnregisterContainer(rcid uint64) (*types.Transaction, error) {
	return _Controller.Contract.UnregisterContainer(&_Controller.TransactOpts, rcid)
}

// UnregisterContainer is a paid mutator transaction binding the contract method 0x98480e2b.
//
// Solidity: function unregisterContainer(uint64 rcid) returns()
func (_Controller *ControllerTransactorSession) UnregisterContainer(rcid uint64) (*types.Transaction, error) {
	return _Controller.Contract.UnregisterContainer(&_Controller.TransactOpts, rcid)
}

// UpdateContainerInfo is a paid mutator transaction binding the contract method 0x0609ca91.
//
// Solidity: function updateContainerInfo(uint64 rcid, string _info) returns()
func (_Controller *ControllerTransactor) UpdateContainerInfo(opts *bind.TransactOpts, rcid uint64, _info string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "updateContainerInfo", rcid, _info)
}

// UpdateContainerInfo is a paid mutator transaction binding the contract method 0x0609ca91.
//
// Solidity: function updateContainerInfo(uint64 rcid, string _info) returns()
func (_Controller *ControllerSession) UpdateContainerInfo(rcid uint64, _info string) (*types.Transaction, error) {
	return _Controller.Contract.UpdateContainerInfo(&_Controller.TransactOpts, rcid, _info)
}

// UpdateContainerInfo is a paid mutator transaction binding the contract method 0x0609ca91.
//
// Solidity: function updateContainerInfo(uint64 rcid, string _info) returns()
func (_Controller *ControllerTransactorSession) UpdateContainerInfo(rcid uint64, _info string) (*types.Transaction, error) {
	return _Controller.Contract.UpdateContainerInfo(&_Controller.TransactOpts, rcid, _info)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eid, address candidateAddr) returns()
func (_Controller *ControllerTransactor) VoteSolver(opts *bind.TransactOpts, eid uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "voteSolver", eid, candidateAddr)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eid, address candidateAddr) returns()
func (_Controller *ControllerSession) VoteSolver(eid uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.Contract.VoteSolver(&_Controller.TransactOpts, eid, candidateAddr)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eid, address candidateAddr) returns()
func (_Controller *ControllerTransactorSession) VoteSolver(eid uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.Contract.VoteSolver(&_Controller.TransactOpts, eid, candidateAddr)
}

// ControllerApplicationRegisteredIterator is returned from FilterApplicationRegistered and is used to iterate over the raw logs and unpacked data for ApplicationRegistered events raised by the Controller contract.
type ControllerApplicationRegisteredIterator struct {
	Event *ControllerApplicationRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerApplicationRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerApplicationRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerApplicationRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerApplicationRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerApplicationRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerApplicationRegistered represents a ApplicationRegistered event raised by the Controller contract.
type ControllerApplicationRegistered struct {
	Appid uint64
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterApplicationRegistered is a free log retrieval operation binding the contract event 0x2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e.
//
// Solidity: event ApplicationRegistered(uint64 appid)
func (_Controller *ControllerFilterer) FilterApplicationRegistered(opts *bind.FilterOpts) (*ControllerApplicationRegisteredIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ApplicationRegistered")
	if err != nil {
		return nil, err
	}
	return &ControllerApplicationRegisteredIterator{contract: _Controller.contract, event: "ApplicationRegistered", logs: logs, sub: sub}, nil
}

// WatchApplicationRegistered is a free log subscription operation binding the contract event 0x2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e.
//
// Solidity: event ApplicationRegistered(uint64 appid)
func (_Controller *ControllerFilterer) WatchApplicationRegistered(opts *bind.WatchOpts, sink chan<- *ControllerApplicationRegistered) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ApplicationRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerApplicationRegistered)
				if err := _Controller.contract.UnpackLog(event, "ApplicationRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplicationRegistered is a log parse operation binding the contract event 0x2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e.
//
// Solidity: event ApplicationRegistered(uint64 appid)
func (_Controller *ControllerFilterer) ParseApplicationRegistered(log types.Log) (*ControllerApplicationRegistered, error) {
	event := new(ControllerApplicationRegistered)
	if err := _Controller.contract.UnpackLog(event, "ApplicationRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerContainerRegisteredIterator is returned from FilterContainerRegistered and is used to iterate over the raw logs and unpacked data for ContainerRegistered events raised by the Controller contract.
type ControllerContainerRegisteredIterator struct {
	Event *ControllerContainerRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerContainerRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerContainerRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerContainerRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerContainerRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerContainerRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerContainerRegistered represents a ContainerRegistered event raised by the Controller contract.
type ControllerContainerRegistered struct {
	Rcid uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContainerRegistered is a free log retrieval operation binding the contract event 0x8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee20.
//
// Solidity: event ContainerRegistered(uint64 rcid)
func (_Controller *ControllerFilterer) FilterContainerRegistered(opts *bind.FilterOpts) (*ControllerContainerRegisteredIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ContainerRegistered")
	if err != nil {
		return nil, err
	}
	return &ControllerContainerRegisteredIterator{contract: _Controller.contract, event: "ContainerRegistered", logs: logs, sub: sub}, nil
}

// WatchContainerRegistered is a free log subscription operation binding the contract event 0x8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee20.
//
// Solidity: event ContainerRegistered(uint64 rcid)
func (_Controller *ControllerFilterer) WatchContainerRegistered(opts *bind.WatchOpts, sink chan<- *ControllerContainerRegistered) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ContainerRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerContainerRegistered)
				if err := _Controller.contract.UnpackLog(event, "ContainerRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContainerRegistered is a log parse operation binding the contract event 0x8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee20.
//
// Solidity: event ContainerRegistered(uint64 rcid)
func (_Controller *ControllerFilterer) ParseContainerRegistered(log types.Log) (*ControllerContainerRegistered, error) {
	event := new(ControllerContainerRegistered)
	if err := _Controller.contract.UnpackLog(event, "ContainerRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerContainerUnregisteredIterator is returned from FilterContainerUnregistered and is used to iterate over the raw logs and unpacked data for ContainerUnregistered events raised by the Controller contract.
type ControllerContainerUnregisteredIterator struct {
	Event *ControllerContainerUnregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerContainerUnregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerContainerUnregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerContainerUnregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerContainerUnregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerContainerUnregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerContainerUnregistered represents a ContainerUnregistered event raised by the Controller contract.
type ControllerContainerUnregistered struct {
	Rcid uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContainerUnregistered is a free log retrieval operation binding the contract event 0x1233fb0c32d384803219b9ff98429a393a3e7bf55401c3491e3361d7913f960b.
//
// Solidity: event ContainerUnregistered(uint64 rcid)
func (_Controller *ControllerFilterer) FilterContainerUnregistered(opts *bind.FilterOpts) (*ControllerContainerUnregisteredIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ContainerUnregistered")
	if err != nil {
		return nil, err
	}
	return &ControllerContainerUnregisteredIterator{contract: _Controller.contract, event: "ContainerUnregistered", logs: logs, sub: sub}, nil
}

// WatchContainerUnregistered is a free log subscription operation binding the contract event 0x1233fb0c32d384803219b9ff98429a393a3e7bf55401c3491e3361d7913f960b.
//
// Solidity: event ContainerUnregistered(uint64 rcid)
func (_Controller *ControllerFilterer) WatchContainerUnregistered(opts *bind.WatchOpts, sink chan<- *ControllerContainerUnregistered) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ContainerUnregistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerContainerUnregistered)
				if err := _Controller.contract.UnpackLog(event, "ContainerUnregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContainerUnregistered is a log parse operation binding the contract event 0x1233fb0c32d384803219b9ff98429a393a3e7bf55401c3491e3361d7913f960b.
//
// Solidity: event ContainerUnregistered(uint64 rcid)
func (_Controller *ControllerFilterer) ParseContainerUnregistered(log types.Log) (*ControllerContainerUnregistered, error) {
	event := new(ControllerContainerUnregistered)
	if err := _Controller.contract.UnpackLog(event, "ContainerUnregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerContainerUpdatedIterator is returned from FilterContainerUpdated and is used to iterate over the raw logs and unpacked data for ContainerUpdated events raised by the Controller contract.
type ControllerContainerUpdatedIterator struct {
	Event *ControllerContainerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerContainerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerContainerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerContainerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerContainerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerContainerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerContainerUpdated represents a ContainerUpdated event raised by the Controller contract.
type ControllerContainerUpdated struct {
	Rcid uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContainerUpdated is a free log retrieval operation binding the contract event 0x786b7b9748bcc4f47869dc619e12836e5f883f087caeed5e066821041d90dc4f.
//
// Solidity: event ContainerUpdated(uint64 rcid)
func (_Controller *ControllerFilterer) FilterContainerUpdated(opts *bind.FilterOpts) (*ControllerContainerUpdatedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ContainerUpdated")
	if err != nil {
		return nil, err
	}
	return &ControllerContainerUpdatedIterator{contract: _Controller.contract, event: "ContainerUpdated", logs: logs, sub: sub}, nil
}

// WatchContainerUpdated is a free log subscription operation binding the contract event 0x786b7b9748bcc4f47869dc619e12836e5f883f087caeed5e066821041d90dc4f.
//
// Solidity: event ContainerUpdated(uint64 rcid)
func (_Controller *ControllerFilterer) WatchContainerUpdated(opts *bind.WatchOpts, sink chan<- *ControllerContainerUpdated) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ContainerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerContainerUpdated)
				if err := _Controller.contract.UnpackLog(event, "ContainerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContainerUpdated is a log parse operation binding the contract event 0x786b7b9748bcc4f47869dc619e12836e5f883f087caeed5e066821041d90dc4f.
//
// Solidity: event ContainerUpdated(uint64 rcid)
func (_Controller *ControllerFilterer) ParseContainerUpdated(log types.Log) (*ControllerContainerUpdated, error) {
	event := new(ControllerContainerUpdated)
	if err := _Controller.contract.UnpackLog(event, "ContainerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerEventSolvedIterator is returned from FilterEventSolved and is used to iterate over the raw logs and unpacked data for EventSolved events raised by the Controller contract.
type ControllerEventSolvedIterator struct {
	Event *ControllerEventSolved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerEventSolvedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerEventSolved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerEventSolved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerEventSolvedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerEventSolvedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerEventSolved represents a EventSolved event raised by the Controller contract.
type ControllerEventSolved struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEventSolved is a free log retrieval operation binding the contract event 0x9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc.
//
// Solidity: event EventSolved(uint64 eid)
func (_Controller *ControllerFilterer) FilterEventSolved(opts *bind.FilterOpts) (*ControllerEventSolvedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "EventSolved")
	if err != nil {
		return nil, err
	}
	return &ControllerEventSolvedIterator{contract: _Controller.contract, event: "EventSolved", logs: logs, sub: sub}, nil
}

// WatchEventSolved is a free log subscription operation binding the contract event 0x9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc.
//
// Solidity: event EventSolved(uint64 eid)
func (_Controller *ControllerFilterer) WatchEventSolved(opts *bind.WatchOpts, sink chan<- *ControllerEventSolved) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "EventSolved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerEventSolved)
				if err := _Controller.contract.UnpackLog(event, "EventSolved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventSolved is a log parse operation binding the contract event 0x9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc.
//
// Solidity: event EventSolved(uint64 eid)
func (_Controller *ControllerFilterer) ParseEventSolved(log types.Log) (*ControllerEventSolved, error) {
	event := new(ControllerEventSolved)
	if err := _Controller.contract.UnpackLog(event, "EventSolved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerNewEventIterator is returned from FilterNewEvent and is used to iterate over the raw logs and unpacked data for NewEvent events raised by the Controller contract.
type ControllerNewEventIterator struct {
	Event *ControllerNewEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerNewEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerNewEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerNewEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerNewEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerNewEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerNewEvent represents a NewEvent event raised by the Controller contract.
type ControllerNewEvent struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNewEvent is a free log retrieval operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eid)
func (_Controller *ControllerFilterer) FilterNewEvent(opts *bind.FilterOpts) (*ControllerNewEventIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "NewEvent")
	if err != nil {
		return nil, err
	}
	return &ControllerNewEventIterator{contract: _Controller.contract, event: "NewEvent", logs: logs, sub: sub}, nil
}

// WatchNewEvent is a free log subscription operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eid)
func (_Controller *ControllerFilterer) WatchNewEvent(opts *bind.WatchOpts, sink chan<- *ControllerNewEvent) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "NewEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerNewEvent)
				if err := _Controller.contract.UnpackLog(event, "NewEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEvent is a log parse operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eid)
func (_Controller *ControllerFilterer) ParseNewEvent(log types.Log) (*ControllerNewEvent, error) {
	event := new(ControllerNewEvent)
	if err := _Controller.contract.UnpackLog(event, "NewEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerRequiredRepliesIterator is returned from FilterRequiredReplies and is used to iterate over the raw logs and unpacked data for RequiredReplies events raised by the Controller contract.
type ControllerRequiredRepliesIterator struct {
	Event *ControllerRequiredReplies // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerRequiredRepliesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerRequiredReplies)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerRequiredReplies)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerRequiredRepliesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerRequiredRepliesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerRequiredReplies represents a RequiredReplies event raised by the Controller contract.
type ControllerRequiredReplies struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequiredReplies is a free log retrieval operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eid)
func (_Controller *ControllerFilterer) FilterRequiredReplies(opts *bind.FilterOpts) (*ControllerRequiredRepliesIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "RequiredReplies")
	if err != nil {
		return nil, err
	}
	return &ControllerRequiredRepliesIterator{contract: _Controller.contract, event: "RequiredReplies", logs: logs, sub: sub}, nil
}

// WatchRequiredReplies is a free log subscription operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eid)
func (_Controller *ControllerFilterer) WatchRequiredReplies(opts *bind.WatchOpts, sink chan<- *ControllerRequiredReplies) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "RequiredReplies")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerRequiredReplies)
				if err := _Controller.contract.UnpackLog(event, "RequiredReplies", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequiredReplies is a log parse operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eid)
func (_Controller *ControllerFilterer) ParseRequiredReplies(log types.Log) (*ControllerRequiredReplies, error) {
	event := new(ControllerRequiredReplies)
	if err := _Controller.contract.UnpackLog(event, "RequiredReplies", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerRequiredVotesIterator is returned from FilterRequiredVotes and is used to iterate over the raw logs and unpacked data for RequiredVotes events raised by the Controller contract.
type ControllerRequiredVotesIterator struct {
	Event *ControllerRequiredVotes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerRequiredVotesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerRequiredVotes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerRequiredVotes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerRequiredVotesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerRequiredVotesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerRequiredVotes represents a RequiredVotes event raised by the Controller contract.
type ControllerRequiredVotes struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequiredVotes is a free log retrieval operation binding the contract event 0xd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b.
//
// Solidity: event RequiredVotes(uint64 eid)
func (_Controller *ControllerFilterer) FilterRequiredVotes(opts *bind.FilterOpts) (*ControllerRequiredVotesIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "RequiredVotes")
	if err != nil {
		return nil, err
	}
	return &ControllerRequiredVotesIterator{contract: _Controller.contract, event: "RequiredVotes", logs: logs, sub: sub}, nil
}

// WatchRequiredVotes is a free log subscription operation binding the contract event 0xd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b.
//
// Solidity: event RequiredVotes(uint64 eid)
func (_Controller *ControllerFilterer) WatchRequiredVotes(opts *bind.WatchOpts, sink chan<- *ControllerRequiredVotes) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "RequiredVotes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerRequiredVotes)
				if err := _Controller.contract.UnpackLog(event, "RequiredVotes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequiredVotes is a log parse operation binding the contract event 0xd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b.
//
// Solidity: event RequiredVotes(uint64 eid)
func (_Controller *ControllerFilterer) ParseRequiredVotes(log types.Log) (*ControllerRequiredVotes, error) {
	event := new(ControllerRequiredVotes)
	if err := _Controller.contract.UnpackLog(event, "RequiredVotes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
