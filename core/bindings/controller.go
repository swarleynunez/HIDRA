// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// DCRContainerInstance is an auto generated low-level Go binding around an user-defined struct.
type DCRContainerInstance struct {
	Host      common.Address
	StartedAt *big.Int
}

// DELReputationScore is an auto generated low-level Go binding around an user-defined struct.
type DELReputationScore struct {
	Node  common.Address
	Score string
}

// ControllerMetaData contains all meta data concerning the Controller contract.
var ControllerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"ApplicationRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"ContainerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"ContainerUnregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"ContainerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"EventSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"NewEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"RequiredReplies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"RequiredVotes\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"apps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unregisteredAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"canSolveEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"nodesTh\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"votesTh\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"maxRepScores\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"ctrs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"autodeployed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unregisteredAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"eType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"hasRequiredReplies\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"hasRequiredVotes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"sentAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"solvedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"existApplication\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"existContainer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"existEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveApplications\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveContainers\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"getApplicationContainers\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"getContainerInstances\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"internalType\":\"structDCR.ContainerInstance[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"getEventReply\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"score\",\"type\":\"string\"}],\"internalType\":\"structDEL.ReputationScore[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"getEventReplyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredNodes\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"hasAlreadyReplied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"hasAlreadyVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"th\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"count\",\"type\":\"uint64\"}],\"name\":\"hasRequiredCount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"isApplicationActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isApplicationOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"appid\",\"type\":\"uint64\"}],\"name\":\"isApplicationUnregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerAutodeployed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isContainerHost\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"rcid\",\"type\":\"uint64\"}],\"name\":\"isContainerUnregistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"isEventSolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isNodeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"appInfo\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"ctrInfos\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"autodeploy\",\"type\":\"bool\"}],\"name\":\"registerApplication\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"specs\",\"type\":\"string\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_eType\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_rcid\",\"type\":\"uint64\"}],\"name\":\"sendEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"score\",\"type\":\"string\"}],\"internalType\":\"structDEL.ReputationScore[]\",\"name\":\"_repScores\",\"type\":\"tuple[]\"}],\"name\":\"sendReply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"}],\"name\":\"solveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextEventId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextAppId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextCtrId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"deployedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eid\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"candidateAddr\",\"type\":\"address\"}],\"name\":\"voteSolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506040805160a081018252600080825260016020808401829052838501829052606080850183905242608090950185905278010000000000000001000000000000000100000000000000008455939091558351928301845260428084529083015260049190920152600280546001600160501b031916620442421790556147af90819061009d90396000f3fe60806040523480156200001157600080fd5b5060043610620002705760003560e01c8063935ef3ad116200015f578063c19d93fb11620000cc578063d4d458a21162000097578063dea65678116200007a578063dea656781462000762578063e0e2a31b1462000779578063e818beb3146200079057600080fd5b8063d4d458a21462000734578063d9d12491146200074b57600080fd5b8063c19d93fb1462000650578063c51b7ef714620006ed578063c786e9401462000704578063cf8c6f52146200071b57600080fd5b8063a3e1e88e116200012a578063b9234ac4116200010d578063b9234ac414620005d1578063bfde530d14620005e8578063c14d22e6146200061157600080fd5b8063a3e1e88e1462000553578063b099ab6914620005ab57600080fd5b8063935ef3ad14620004f1578063938ea59614620004fb5780639cc4dc031462000512578063a168a279146200053c57600080fd5b80635aaa0e2c11620001fe5780638a36c7ff11620001c95780638f784dbe11620001ac5780638f784dbe14620004ac57806390d8229c14620004c3578063934557b714620004da57600080fd5b80638a36c7ff146200047e5780638cc0ebb5146200049557600080fd5b80635aaa0e2c14620003a457806379502c5514620003fb578063801e37c0146200045057806383038ac2146200046757600080fd5b806327c6f43e116200023f57806327c6f43e14620003465780632ffdaa53146200035f57806345ebd573146200037657806354ad53c5146200038d57600080fd5b8063087e944814620002755780630bce037d1462000297578063189a5a1714620002bf5780631c9b9628146200031e575b600080fd5b6200027f620007bd565b6040516200028e9190620033db565b60405180910390f35b620002ae620002a836600462003449565b6200084b565b6040516200028e93929190620034e7565b620002f8620002d0366004620035cf565b60036020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016200028e565b620003356200032f366004620035f4565b62000a87565b60405190151581526020016200028e565b6200035d6200035736600462003754565b62000aba565b005b620003356200037036600462003795565b62000c3b565b6200035d6200038736600462003795565b62000c8b565b6200035d6200039e366004620037c4565b62001258565b62000335620003b536600462003795565b67ffffffffffffffff8216600090815260056020818152604080842073ffffffffffffffffffffffffffffffffffffffff86168552909201905290205460ff1692915050565b600254620004259060ff8082169161010081049091169062010000900467ffffffffffffffff1683565b6040805160ff948516815293909216602084015267ffffffffffffffff16908201526060016200028e565b6200033562000461366004620035f4565b62001768565b6200035d62000478366004620035f4565b620017a6565b620003356200048f3660046200380f565b62001bdf565b62000335620004a6366004620035cf565b62001c56565b62000335620004bd366004620035f4565b62001c8e565b62000335620004d4366004620035f4565b62001cb9565b6200027f620004eb366004620035f4565b62001ce4565b6200027f62001d8a565b620003356200050c36600462003795565b62001ded565b6200052962000523366004620035f4565b62001e30565b6040516200028e95949392919062003835565b620003356200054d366004620035f4565b62001f00565b620003356200056436600462003795565b67ffffffffffffffff8216600090815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845260060190915290205460ff1692915050565b620005c2620005bc366004620035f4565b62001f90565b6040516200028e919062003877565b6200035d620005e236600462003905565b6200202e565b620005ff620005f9366004620035f4565b62002896565b6040516200028e949392919062003a45565b6200064162000622366004620035f4565b67ffffffffffffffff1660009081526005602052604090206003015490565b6040519081526020016200028e565b600054600154620006b09167ffffffffffffffff8082169268010000000000000000830482169270010000000000000000000000000000000081048316927801000000000000000000000000000000000000000000000000909104169085565b6040805167ffffffffffffffff96871681529486166020860152928516928401929092529092166060820152608081019190915260a0016200028e565b6200035d620006fe36600462003a9a565b62002966565b6200033562000715366004620035f4565b62002bb0565b6200072562002c55565b6040516200028e919062003b90565b620003356200074536600462003795565b62002cc5565b620003356200075c366004620035f4565b62002d79565b6200033562000773366004620035f4565b62002da5565b620003356200078a366004620035f4565b62002e35565b620007a7620007a1366004620035f4565b62002e76565b6040516200028e98979695949392919062003be0565b6060600a8054806020026020016040519081016040528092919081815260200182805480156200084157602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411620007fb5790505b5050505050905090565b600060606000600560008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206003018467ffffffffffffffff168154811062000899576200089962003c50565b6000918252602080832060049092029091015467ffffffffffffffff808916845260059092526040909220600301805473ffffffffffffffffffffffffffffffffffffffff9093169290918716908110620008f857620008f862003c50565b9060005260206000209060040201600101600560008867ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000206003018667ffffffffffffffff168154811062000951576200095162003c50565b90600052602060002090600402016003015481805480602002602001604051908101604052809291908181526020016000905b8282101562000a745760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff1682526001810180549293919291840191620009dc9062003c7f565b80601f016020809104026020016040519081016040528092919081815260200182805462000a0a9062003c7f565b801562000a5b5780601f1062000a2f5761010080835404028352916020019162000a5b565b820191906000526020600020905b81548152906001019060200180831162000a3d57829003601f168201915b5050505050815250508152602001906001019062000984565b5050505091509250925092509250925092565b67ffffffffffffffff81166000908152600560205260408120600901541562000ab257506001919050565b506000919050565b62000ac53362001c56565b1562000b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f546865206e6f646520697320616c72656164792072656769737465726564000060448201526064015b60405180910390fd5b338160405162000b4290620033cd565b62000b4f92919062003cd4565b604051809103906000f08015801562000b6c573d6000803e3d6000fd5b50336000818152600360205260408120805473ffffffffffffffffffffffffffffffffffffffff949094167fffffffffffffffffffffffff0000000000000000000000000000000000000000948516179055600480546001810182559082527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054909316909117909155805467ffffffffffffffff16908062000c118362003d34565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505050565b67ffffffffffffffff821660009081526005602052604081206002015473ffffffffffffffffffffffffffffffffffffffff80841691160362000c815750600162000c85565b5060005b92915050565b62000c963362001c56565b62000cfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546865206e6f6465206973206e6f742072656769737465726564000000000000604482015260640162000b29565b62000d098262002e35565b62000d71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546865206576656e7420646f6573206e6f742065786973740000000000000000604482015260640162000b29565b62000d7c8262000a87565b1562000de5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f546865206576656e7420697320736f6c76656400000000000000000000000000604482015260640162000b29565b67ffffffffffffffff821660009081526005602052604090206007015460ff1662000e93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f546865206576656e7420646f6573206e6f74206861766520746865207265717560448201527f69726564207265706c6965730000000000000000000000000000000000000000606482015260840162000b29565b67ffffffffffffffff8216600090815260056020526040902060070154610100900460ff161562000f47576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f546865206576656e7420616c726561647920686173207468652072657175697260448201527f656420766f746573000000000000000000000000000000000000000000000000606482015260840162000b29565b62000f528162001c56565b62000fdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5468652063616e646964617465206e6f6465206973206e6f742072656769737460448201527f6572656400000000000000000000000000000000000000000000000000000000606482015260840162000b29565b67ffffffffffffffff8216600090815260056020908152604080832033845260060190915290205460ff161562001099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f546865206e6f64652068617320616c726561647920766f746564206120736f6c60448201527f7665720000000000000000000000000000000000000000000000000000000000606482015260840162000b29565b67ffffffffffffffff808316600090815260056020908152604080832033845260068101835281842080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905573ffffffffffffffffffffffffffffffffffffffff861684526004019091528120805490921691906200111e8362003d34565b825461010092830a67ffffffffffffffff818102199092169282160291909117909255600254858316600090815260056020908152604080832073ffffffffffffffffffffffffffffffffffffffff891684526004019091529020546200118e945091900460ff16911662001bdf565b15620012545767ffffffffffffffff82166000818152600560209081526040918290206002810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff871617905560070180546101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90911617905590519182527fd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b91015b60405180910390a15b5050565b620012633362001c56565b620012cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546865206e6f6465206973206e6f742072656769737465726564000000000000604482015260640162000b29565b600080546006805460018101909155600481047ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805460039092166008026101000a67ffffffffffffffff6801000000000000000094859004811682029181021990931617905582549190910416815260056020526040902062001351838262003db0565b506000805467ffffffffffffffff6801000000000000000091829004811683526005602052604080842060010180547fffffffffffffffffffffffff000000000000000000000000000000000000000016331790558354929092048116835291204260089190910155811615620016c957620013cd8162002d79565b6200145a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f546865206576656e74277320636f6e7461696e657220646f6573206e6f74206560448201527f7869737400000000000000000000000000000000000000000000000000000000606482015260840162000b29565b67ffffffffffffffff8082166000908152600860205260409020546200148291163362001ded565b8062001495575062001495813362002cc5565b62001523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f546865206e6f6465206973206e65697468657220746865206576656e7427732060448201527f636f6e7461696e6572206f776e6572206e6f722074686520686f737400000000606482015260840162000b29565b6200152e8162002bb0565b15620015bd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f546865206576656e74277320636f6e7461696e657220697320696e206175746f60448201527f6465706c6f79206d6f6465000000000000000000000000000000000000000000606482015260840162000b29565b620015c88162001c8e565b1562001657576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f546865206576656e74277320636f6e7461696e65722077617320756e7265676960448201527f7374657265640000000000000000000000000000000000000000000000000000606482015260840162000b29565b6000805467ffffffffffffffff680100000000000000009091048116825260056020526040909120600201805491831674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff9092169190911790555b6000546040516801000000000000000090910467ffffffffffffffff1681527f4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c9060200160405180910390a16000805468010000000000000000900467ffffffffffffffff169060086200173d8362003d34565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b67ffffffffffffffff811660009081526007602052604081205473ffffffffffffffffffffffffffffffffffffffff161562000ab257506001919050565b620017b13362001c56565b62001819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546865206e6f6465206973206e6f742072656769737465726564000000000000604482015260640162000b29565b620018248162002e35565b6200188c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546865206576656e7420646f6573206e6f742065786973740000000000000000604482015260640162000b29565b620018978162000a87565b1562001900576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f546865206576656e7420697320616c726561647920736f6c7665640000000000604482015260640162000b29565b6200190c813362000c3b565b62001974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f546865206e6f64652063616e6e6f7420736f6c766520746865206576656e7400604482015260640162000b29565b67ffffffffffffffff80821660009081526005602052604090204260098201556002015474010000000000000000000000000000000000000000900416801562001b975767ffffffffffffffff8216600090815260056020526040902060020154620019f890829073ffffffffffffffffffffffffffffffffffffffff1662002cc5565b62001a8d5760408051808201825233815242602080830191825267ffffffffffffffff8516600090815260088252938420600301805460018082018355918652919094209251600290910290920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092178255519101555b67ffffffffffffffff80821660009081526008602052604090205462001ab4911662002da5565b62001b285767ffffffffffffffff8082166000908152600860208190526040822054600980546001810182559352600483047f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af01805460039094169092026101000a90841681029302199091169190911790555b62001b338162001f00565b62001b9757600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a86004820401805460039092166008026101000a67ffffffffffffffff81810219909316928416029190911790555b62001ba460068362002f86565b60405167ffffffffffffffff831681527f9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc906020016200124b565b60008054819060649062001c029060ff87169067ffffffffffffffff1662003ed7565b62001c0e919062003f06565b905067ffffffffffffffff8116158062001c3b57508267ffffffffffffffff168167ffffffffffffffff16145b1562001c4c57600191505062000c85565b5060009392505050565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600360205260408120549091161562000ab257506001919050565b67ffffffffffffffff81166000908152600860205260408120600501541562000ab257506001919050565b67ffffffffffffffff81166000908152600760205260408120600401541562000ab257506001919050565b67ffffffffffffffff811660009081526007602090815260409182902060020180548351818402810184019094528084526060939283018282801562001d7e57602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841162001d385790505b50505050509050919050565b6060600980548060200260200160405190810160405280929190818152602001828054801562000841576000918252602091829020805467ffffffffffffffff168452908202830192909160089101808411620007fb5790505050505050905090565b67ffffffffffffffff821660009081526007602052604081205473ffffffffffffffffffffffffffffffffffffffff80841691160362000c815750600162000c85565b6008602052600090815260409020805460018201805467ffffffffffffffff909216929162001e5f9062003c7f565b80601f016020809104026020016040519081016040528092919081815260200182805462001e8d9062003c7f565b801562001ede5780601f1062001eb25761010080835404028352916020019162001ede565b820191906000526020600020905b81548152906001019060200180831162001ec057829003601f168201915b5050505060028301546004840154600590940154929360ff9091169290915085565b6000805b600a5467ffffffffffffffff8216101562000c81578267ffffffffffffffff16600a8267ffffffffffffffff168154811062001f445762001f4462003c50565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff160362001f7b5750600192915050565b8062001f878162003d34565b91505062001f04565b67ffffffffffffffff81166000908152600860209081526040808320600301805482518185028101850190935280835260609492939192909184015b82821015620020235760008481526020908190206040805180820190915260028502909101805473ffffffffffffffffffffffffffffffffffffffff16825260019081015482840152908352909201910162001fcc565b505050509050919050565b620020393362001c56565b620020a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546865206e6f6465206973206e6f742072656769737465726564000000000000604482015260640162000b29565b620020ac8262002e35565b62002114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f546865206576656e7420646f6573206e6f742065786973740000000000000000604482015260640162000b29565b6200211f8262000a87565b1562002188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f546865206576656e7420697320736f6c76656400000000000000000000000000604482015260640162000b29565b67ffffffffffffffff821660009081526005602052604090206007015460ff16158015620021e2575060025467ffffffffffffffff8316600090815260056020526040902060030154620021e09160ff169062001bdf565b155b62002270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f546865206576656e7420616c726561647920686173207468652072657175697260448201527f6564207265706c69657300000000000000000000000000000000000000000000606482015260840162000b29565b67ffffffffffffffff82166000908152600560208181526040808420338552909201905290205460ff161562002329576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f546865206e6f64652068617320616c7265616479207265706c6965642074686560448201527f206576656e740000000000000000000000000000000000000000000000000000606482015260840162000b29565b67ffffffffffffffff8216600090815260056020818152604080842033808652818501845291852080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091559383526003908101805494850181558552918420600490930290920180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690921782554290820155905b82518167ffffffffffffffff161015620027e1573373ffffffffffffffffffffffffffffffffffffffff16838267ffffffffffffffff168151811062002413576200241362003c50565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16036200249e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53656c662d72657075746174696f6e7320617265206e6f7420616c6c6f776564604482015260640162000b29565b620024d3838267ffffffffffffffff1681518110620024c157620024c162003c50565b60200260200101516000015162001c56565b62002561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f496e76616c69642072657075746174696f6e2073636f72652028746865206e6f60448201527f6465206973206e6f742072656769737465726564290000000000000000000000606482015260840162000b29565b816002016000848367ffffffffffffffff168151811062002586576200258662003c50565b6020908102919091018101515173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040016000205460ff16156200264a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f496e76616c69642072657075746174696f6e2073636f7265202872657065617460448201527f6564206e6f646529000000000000000000000000000000000000000000000000606482015260840162000b29565b6001826002016000858467ffffffffffffffff168151811062002671576200267162003c50565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550816001016040518060400160405280858467ffffffffffffffff1681518110620026fc57620026fc62003c50565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168152602001858467ffffffffffffffff168151811062002742576200274262003c50565b602090810291909101810151810151909152825460018082018555600094855293829020835160029092020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091178155908201519192909190820190620027c8908262003db0565b5050508080620027d89062003d34565b915050620023c9565b5060025467ffffffffffffffff8416600090815260056020526040902060030154620028119160ff169062001bdf565b15620028915767ffffffffffffffff831660008181526005602090815260409182902060070180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527f345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689910160405180910390a15b505050565b6007602052600090815260409020805460018201805473ffffffffffffffffffffffffffffffffffffffff9092169291620028d19062003c7f565b80601f0160208091040260200160405190810160405280929190818152602001828054620028ff9062003c7f565b8015620029505780601f10620029245761010080835404028352916020019162002950565b820191906000526020600020905b8154815290600101906020018083116200293257829003601f168201915b5050505050908060030154908060040154905084565b620029713362001c56565b620029d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f546865206e6f6465206973206e6f742072656769737465726564000000000000604482015260640162000b29565b6000805467ffffffffffffffff70010000000000000000000000000000000091829004811683526007602052604080842080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055835492909204168252902060010162002a4c848262003db0565b5060008054700100000000000000000000000000000000900467ffffffffffffffff90811682526007602090815260408084204260039091015592549251780100000000000000000000000000000000000000000000000090930490911682527f2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e910160405180910390a160005b82518167ffffffffffffffff16101562002b5357600054835162002b3e9167ffffffffffffffff7001000000000000000000000000000000009091048116918691851690811062002b2f5762002b2f62003c50565b6020026020010151846200311b565b8062002b4a8162003d34565b91505062002ada565b5060008054700100000000000000000000000000000000900467ffffffffffffffff1690601062002b848362003d34565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050565b67ffffffffffffffff811660009081526008602052604081206002015460ff16801562002bf9575067ffffffffffffffff82166000908152600860205260409020600301546001145b801562002c47575067ffffffffffffffff82166000908152600860205260408120600301805490919062002c315762002c3162003c50565b9060005260206000209060020201600101546000145b1562000ab257506001919050565b606060048054806020026020016040519081016040528092919081815260200182805480156200084157602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831162002c90575050505050905090565b67ffffffffffffffff8216600090815260086020526040812060030154801580159062001c3b575067ffffffffffffffff8416600090815260086020526040902073ffffffffffffffffffffffffffffffffffffffff84169060030162002d2e60018462003f55565b8154811062002d415762002d4162003c50565b600091825260209091206002909102015473ffffffffffffffffffffffffffffffffffffffff160362001c4c57600191505062000c85565b67ffffffffffffffff8082166000908152600860205260408120549091161562000ab257506001919050565b6000805b60095467ffffffffffffffff8216101562000c81578267ffffffffffffffff1660098267ffffffffffffffff168154811062002de95762002de962003c50565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff160362002e205750600192915050565b8062002e2c8162003d34565b91505062002da9565b67ffffffffffffffff811660009081526005602052604081206001015473ffffffffffffffffffffffffffffffffffffffff161562000ab257506001919050565b60056020526000908152604090208054819062002e939062003c7f565b80601f016020809104026020016040519081016040528092919081815260200182805462002ec19062003c7f565b801562002f125780601f1062002ee65761010080835404028352916020019162002f12565b820191906000526020600020905b81548152906001019060200180831162002ef457829003601f168201915b505050506001830154600284015460078501546008860154600990960154949573ffffffffffffffffffffffffffffffffffffffff9384169593831694507401000000000000000000000000000000000000000090920467ffffffffffffffff169260ff8083169361010090930416919088565b60005b825467ffffffffffffffff8216101562002891578167ffffffffffffffff16838267ffffffffffffffff168154811062002fc75762002fc762003c50565b6000918252602090912060048204015460039091166008026101000a900467ffffffffffffffff1603620031065782548390620030079060019062003f55565b815481106200301a576200301a62003c50565b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff16838267ffffffffffffffff168154811062003063576200306362003c50565b90600052602060002090600491828204019190066008026101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555082805480620030b157620030b162003f6b565b60008281526020902060047fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191820401805467ffffffffffffffff600860038516026101000a02191690559055505050565b80620031128162003d34565b91505062002f89565b67ffffffffffffffff808416600081815260076020908152604080832083546002909101805460018181018355918652848620600482040180546008600390931683026101000a7801000000000000000000000000000000000000000000000000958690048b168102908b021990911617905585548390048816865290935281842080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001690951790945582549390930490931681522001620031e0838262003db0565b50600080547801000000000000000000000000000000000000000000000000900467ffffffffffffffff16815260086020526040902042600490910155801562003339576000805467ffffffffffffffff780100000000000000000000000000000000000000000000000090910416815260086020908152604080832060020180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055805180820190915282815290810191909152338152600080547801000000000000000000000000000000000000000000000000900467ffffffffffffffff168152600860209081526040822060030180546001808201835591845292829020845160029094020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9094169390931783559201519101555b600054604051780100000000000000000000000000000000000000000000000090910467ffffffffffffffff1681527f8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee209060200160405180910390a1600080547801000000000000000000000000000000000000000000000000900467ffffffffffffffff1690601862002b848362003d34565b6107df8062003f9b83390190565b6020808252825182820181905260009190848201906040850190845b818110156200341f57835167ffffffffffffffff1683529284019291840191600101620033f7565b50909695505050505050565b803567ffffffffffffffff811681146200344457600080fd5b919050565b600080604083850312156200345d57600080fd5b62003468836200342b565b915062003478602084016200342b565b90509250929050565b6000815180845260005b81811015620034a9576020818501810151868301820152016200348b565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60006060820173ffffffffffffffffffffffffffffffffffffffff8087168452602060608186015282875180855260808701915060808160051b880101945082890160005b8281101562003592578887037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80018452815180518716885285015160408689018190526200357d818a018362003481565b9850505092840192908401906001016200352c565b50505050505080915050826040830152949350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146200344457600080fd5b600060208284031215620035e257600080fd5b620035ed82620035aa565b9392505050565b6000602082840312156200360757600080fd5b620035ed826200342b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171562003667576200366762003612565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715620036b757620036b762003612565b604052919050565b600082601f830112620036d157600080fd5b813567ffffffffffffffff811115620036ee57620036ee62003612565b6200372160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016200366d565b8181528460208386010111156200373757600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156200376757600080fd5b813567ffffffffffffffff8111156200377f57600080fd5b6200378d84828501620036bf565b949350505050565b60008060408385031215620037a957600080fd5b620037b4836200342b565b91506200347860208401620035aa565b60008060408385031215620037d857600080fd5b823567ffffffffffffffff811115620037f057600080fd5b620037fe85828601620036bf565b92505062003478602084016200342b565b600080604083850312156200382357600080fd5b823560ff811681146200346857600080fd5b67ffffffffffffffff8616815260a0602082015260006200385a60a083018762003481565b941515604083015250606081019290925260809091015292915050565b602080825282518282018190526000919060409081850190868401855b82811015620038d1578151805173ffffffffffffffffffffffffffffffffffffffff16855286015186850152928401929085019060010162003894565b5091979650505050505050565b600067ffffffffffffffff821115620038fb57620038fb62003612565b5060051b60200190565b60008060408084860312156200391a57600080fd5b62003925846200342b565b925060208085013567ffffffffffffffff808211156200394457600080fd5b818701915087601f8301126200395957600080fd5b8135620039706200396a82620038de565b6200366d565b81815260059190911b8301840190848101908a8311156200399057600080fd5b8585015b8381101562003a3357803585811115620039ae5760008081fd5b8601808d037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001891315620039e35760008081fd5b620039ed62003641565b620039fa898301620035aa565b8152898201358781111562003a0f5760008081fd5b62003a1f8f8b83860101620036bf565b828b01525084525091860191860162003994565b50809750505050505050509250929050565b73ffffffffffffffffffffffffffffffffffffffff8516815260806020820152600062003a76608083018662003481565b6040830194909452506060015292915050565b803580151581146200344457600080fd5b60008060006060848603121562003ab057600080fd5b833567ffffffffffffffff8082111562003ac957600080fd5b62003ad787838801620036bf565b945060209150818601358181111562003aef57600080fd5b8601601f8101881362003b0157600080fd5b803562003b126200396a82620038de565b81815260059190911b8201840190848101908a83111562003b3257600080fd5b8584015b8381101562003b6f5780358681111562003b505760008081fd5b62003b608d8983890101620036bf565b84525091860191860162003b36565b5080975050505050505062003b876040850162003a89565b90509250925092565b6020808252825182820181905260009190848201906040850190845b818110156200341f57835173ffffffffffffffffffffffffffffffffffffffff168352928401929184019160010162003bac565b600061010080835262003bf68184018c62003481565b73ffffffffffffffffffffffffffffffffffffffff9a8b1660208501529890991660408301525067ffffffffffffffff959095166060860152921515608085015290151560a084015260c083015260e09091015292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c9082168062003c9457607f821691505b60208210810362003cce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006200378d604083018462003481565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600067ffffffffffffffff80831681810362003d545762003d5462003d05565b6001019392505050565b601f8211156200289157600081815260208120601f850160051c8101602086101562003d875750805b601f850160051c820191505b8181101562003da85782815560010162003d93565b505050505050565b815167ffffffffffffffff81111562003dcd5762003dcd62003612565b62003de58162003dde845462003c7f565b8462003d5e565b602080601f83116001811462003e3b576000841562003e045750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b17855562003da8565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101562003e8a5788860151825594840194600190910190840162003e69565b508582101562003ec757878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff81811683821602808216919082811462003efe5762003efe62003d05565b505092915050565b600067ffffffffffffffff8084168062003f49577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b92169190910492915050565b8181038181111562000c855762000c8562003d05565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe608060405234801561001057600080fd5b506040516107df3803806107df83398101604081905261002f91610086565b600080546001600160a01b0384166001600160a01b0319918216179091556001805490911633179055600261006482826101f8565b505042600355506102b7565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561009957600080fd5b82516001600160a01b03811681146100b057600080fd5b602084810151919350906001600160401b03808211156100cf57600080fd5b818601915086601f8301126100e357600080fd5b8151818111156100f5576100f5610070565b604051601f8201601f19908116603f0116810190838211818310171561011d5761011d610070565b81604052828152898684870101111561013557600080fd5b600093505b82841015610157578484018601518185018701529285019261013a565b60008684830101528096505050505050509250929050565b600181811c9082168061018357607f821691505b6020821081036101a357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101f357600081815260208120601f850160051c810160208610156101d05750805b601f850160051c820191505b818110156101ef578281556001016101dc565b5050505b505050565b81516001600160401b0381111561021157610211610070565b6102258161021f845461016f565b846101a9565b602080601f83116001811461025a57600084156102425750858301515b600019600386901b1c1916600185901b1785556101ef565b600085815260208120601f198616915b828110156102895788860151825594840194600190910190840161026a565b50858210156102a75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610519806102c66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632c844f501461003b578063b60bdb2914610059575b600080fd5b61004361006e565b60405161005091906101bd565b60405180910390f35b61006c610067366004610258565b610102565b005b606060018001805461007f90610327565b80601f01602080910402602001604051908101604052809291908181526020018280546100ab90610327565b80156100f85780601f106100cd576101008083540402835291602001916100f8565b820191906000526020600020905b8154815290600101906020018083116100db57829003601f168201915b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146101ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4f6e6c792074686520636f6e7472616374206f776e65722063616e2063616c6c60448201527f20746869732066756e6374696f6e000000000000000000000000000000000000606482015260840160405180910390fd5b60026101b982826103c9565b5050565b600060208083528351808285015260005b818110156101ea578581018301518582016040015282016101ce565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561026a57600080fd5b813567ffffffffffffffff8082111561028257600080fd5b818401915084601f83011261029657600080fd5b8135818111156102a8576102a8610229565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156102ee576102ee610229565b8160405282815287602084870101111561030757600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c9082168061033b57607f821691505b602082108103610374577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156103c457600081815260208120601f850160051c810160208610156103a15750805b601f850160051c820191505b818110156103c0578281556001016103ad565b5050505b505050565b815167ffffffffffffffff8111156103e3576103e3610229565b6103f7816103f18454610327565b8461037a565b602080601f83116001811461044a57600084156104145750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556103c0565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561049757888601518255948401946001909101908401610478565b50858210156104d357878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122082ac98cea8921074d3dfb40d458a2157c7c3ee0a48fa945b5727d5b2426cb94264736f6c63430008150033a2646970667358221220a4bbc7bc6c3467196eab4cf003a854604b6589a451f788c809e45d00b67a69ee64736f6c63430008150033",
}

// ControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ControllerMetaData.ABI instead.
var ControllerABI = ControllerMetaData.ABI

// ControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ControllerMetaData.Bin instead.
var ControllerBin = ControllerMetaData.Bin

// DeployController deploys a new Ethereum contract, binding an instance of Controller to it.
func DeployController(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Controller, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ControllerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// Controller is an auto generated Go binding around an Ethereum contract.
type Controller struct {
	ControllerCaller     // Read-only binding to the contract
	ControllerTransactor // Write-only binding to the contract
	ControllerFilterer   // Log filterer for contract events
}

// ControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ControllerSession struct {
	Contract     *Controller       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ControllerCallerSession struct {
	Contract *ControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ControllerTransactorSession struct {
	Contract     *ControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ControllerRaw struct {
	Contract *Controller // Generic contract binding to access the raw methods on
}

// ControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ControllerCallerRaw struct {
	Contract *ControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ControllerTransactorRaw struct {
	Contract *ControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewController creates a new instance of Controller, bound to a specific deployed contract.
func NewController(address common.Address, backend bind.ContractBackend) (*Controller, error) {
	contract, err := bindController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// NewControllerCaller creates a new read-only instance of Controller, bound to a specific deployed contract.
func NewControllerCaller(address common.Address, caller bind.ContractCaller) (*ControllerCaller, error) {
	contract, err := bindController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerCaller{contract: contract}, nil
}

// NewControllerTransactor creates a new write-only instance of Controller, bound to a specific deployed contract.
func NewControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ControllerTransactor, error) {
	contract, err := bindController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerTransactor{contract: contract}, nil
}

// NewControllerFilterer creates a new log filterer instance of Controller, bound to a specific deployed contract.
func NewControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ControllerFilterer, error) {
	contract, err := bindController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ControllerFilterer{contract: contract}, nil
}

// bindController binds a generic wrapper to an already deployed contract.
func bindController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.ControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transact(opts, method, params...)
}

// Apps is a free data retrieval call binding the contract method 0xbfde530d.
//
// Solidity: function apps(uint64 ) view returns(address owner, string info, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCaller) Apps(opts *bind.CallOpts, arg0 uint64) (struct {
	Owner          common.Address
	Info           string
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "apps", arg0)

	outstruct := new(struct {
		Owner          common.Address
		Info           string
		RegisteredAt   *big.Int
		UnregisteredAt *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Owner = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Info = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.RegisteredAt = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.UnregisteredAt = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Apps is a free data retrieval call binding the contract method 0xbfde530d.
//
// Solidity: function apps(uint64 ) view returns(address owner, string info, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerSession) Apps(arg0 uint64) (struct {
	Owner          common.Address
	Info           string
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Apps(&_Controller.CallOpts, arg0)
}

// Apps is a free data retrieval call binding the contract method 0xbfde530d.
//
// Solidity: function apps(uint64 ) view returns(address owner, string info, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCallerSession) Apps(arg0 uint64) (struct {
	Owner          common.Address
	Info           string
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Apps(&_Controller.CallOpts, arg0)
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) CanSolveEvent(opts *bind.CallOpts, eid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "canSolveEvent", eid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) CanSolveEvent(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.CanSolveEvent(&_Controller.CallOpts, eid, nodeAddr)
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) CanSolveEvent(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.CanSolveEvent(&_Controller.CallOpts, eid, nodeAddr)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint8 nodesTh, uint8 votesTh, uint64 maxRepScores)
func (_Controller *ControllerCaller) Config(opts *bind.CallOpts) (struct {
	NodesTh      uint8
	VotesTh      uint8
	MaxRepScores uint64
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "config")

	outstruct := new(struct {
		NodesTh      uint8
		VotesTh      uint8
		MaxRepScores uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NodesTh = *abi.ConvertType(out[0], new(uint8)).(*uint8)
	outstruct.VotesTh = *abi.ConvertType(out[1], new(uint8)).(*uint8)
	outstruct.MaxRepScores = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint8 nodesTh, uint8 votesTh, uint64 maxRepScores)
func (_Controller *ControllerSession) Config() (struct {
	NodesTh      uint8
	VotesTh      uint8
	MaxRepScores uint64
}, error) {
	return _Controller.Contract.Config(&_Controller.CallOpts)
}

// Config is a free data retrieval call binding the contract method 0x79502c55.
//
// Solidity: function config() view returns(uint8 nodesTh, uint8 votesTh, uint64 maxRepScores)
func (_Controller *ControllerCallerSession) Config() (struct {
	NodesTh      uint8
	VotesTh      uint8
	MaxRepScores uint64
}, error) {
	return _Controller.Contract.Config(&_Controller.CallOpts)
}

// Ctrs is a free data retrieval call binding the contract method 0x9cc4dc03.
//
// Solidity: function ctrs(uint64 ) view returns(uint64 appid, string info, bool autodeployed, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCaller) Ctrs(opts *bind.CallOpts, arg0 uint64) (struct {
	Appid          uint64
	Info           string
	Autodeployed   bool
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "ctrs", arg0)

	outstruct := new(struct {
		Appid          uint64
		Info           string
		Autodeployed   bool
		RegisteredAt   *big.Int
		UnregisteredAt *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Appid = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.Info = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Autodeployed = *abi.ConvertType(out[2], new(bool)).(*bool)
	outstruct.RegisteredAt = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.UnregisteredAt = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Ctrs is a free data retrieval call binding the contract method 0x9cc4dc03.
//
// Solidity: function ctrs(uint64 ) view returns(uint64 appid, string info, bool autodeployed, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerSession) Ctrs(arg0 uint64) (struct {
	Appid          uint64
	Info           string
	Autodeployed   bool
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Ctrs(&_Controller.CallOpts, arg0)
}

// Ctrs is a free data retrieval call binding the contract method 0x9cc4dc03.
//
// Solidity: function ctrs(uint64 ) view returns(uint64 appid, string info, bool autodeployed, uint256 registeredAt, uint256 unregisteredAt)
func (_Controller *ControllerCallerSession) Ctrs(arg0 uint64) (struct {
	Appid          uint64
	Info           string
	Autodeployed   bool
	RegisteredAt   *big.Int
	UnregisteredAt *big.Int
}, error) {
	return _Controller.Contract.Ctrs(&_Controller.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) view returns(string eType, address sender, address solver, uint64 rcid, bool hasRequiredReplies, bool hasRequiredVotes, uint256 sentAt, uint256 solvedAt)
func (_Controller *ControllerCaller) Events(opts *bind.CallOpts, arg0 uint64) (struct {
	EType              string
	Sender             common.Address
	Solver             common.Address
	Rcid               uint64
	HasRequiredReplies bool
	HasRequiredVotes   bool
	SentAt             *big.Int
	SolvedAt           *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "events", arg0)

	outstruct := new(struct {
		EType              string
		Sender             common.Address
		Solver             common.Address
		Rcid               uint64
		HasRequiredReplies bool
		HasRequiredVotes   bool
		SentAt             *big.Int
		SolvedAt           *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.EType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.Sender = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Solver = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Rcid = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.HasRequiredReplies = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.HasRequiredVotes = *abi.ConvertType(out[5], new(bool)).(*bool)
	outstruct.SentAt = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)
	outstruct.SolvedAt = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) view returns(string eType, address sender, address solver, uint64 rcid, bool hasRequiredReplies, bool hasRequiredVotes, uint256 sentAt, uint256 solvedAt)
func (_Controller *ControllerSession) Events(arg0 uint64) (struct {
	EType              string
	Sender             common.Address
	Solver             common.Address
	Rcid               uint64
	HasRequiredReplies bool
	HasRequiredVotes   bool
	SentAt             *big.Int
	SolvedAt           *big.Int
}, error) {
	return _Controller.Contract.Events(&_Controller.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) view returns(string eType, address sender, address solver, uint64 rcid, bool hasRequiredReplies, bool hasRequiredVotes, uint256 sentAt, uint256 solvedAt)
func (_Controller *ControllerCallerSession) Events(arg0 uint64) (struct {
	EType              string
	Sender             common.Address
	Solver             common.Address
	Rcid               uint64
	HasRequiredReplies bool
	HasRequiredVotes   bool
	SentAt             *big.Int
	SolvedAt           *big.Int
}, error) {
	return _Controller.Contract.Events(&_Controller.CallOpts, arg0)
}

// ExistApplication is a free data retrieval call binding the contract method 0x801e37c0.
//
// Solidity: function existApplication(uint64 appid) view returns(bool)
func (_Controller *ControllerCaller) ExistApplication(opts *bind.CallOpts, appid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "existApplication", appid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistApplication is a free data retrieval call binding the contract method 0x801e37c0.
//
// Solidity: function existApplication(uint64 appid) view returns(bool)
func (_Controller *ControllerSession) ExistApplication(appid uint64) (bool, error) {
	return _Controller.Contract.ExistApplication(&_Controller.CallOpts, appid)
}

// ExistApplication is a free data retrieval call binding the contract method 0x801e37c0.
//
// Solidity: function existApplication(uint64 appid) view returns(bool)
func (_Controller *ControllerCallerSession) ExistApplication(appid uint64) (bool, error) {
	return _Controller.Contract.ExistApplication(&_Controller.CallOpts, appid)
}

// ExistContainer is a free data retrieval call binding the contract method 0xd9d12491.
//
// Solidity: function existContainer(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) ExistContainer(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "existContainer", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistContainer is a free data retrieval call binding the contract method 0xd9d12491.
//
// Solidity: function existContainer(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) ExistContainer(rcid uint64) (bool, error) {
	return _Controller.Contract.ExistContainer(&_Controller.CallOpts, rcid)
}

// ExistContainer is a free data retrieval call binding the contract method 0xd9d12491.
//
// Solidity: function existContainer(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) ExistContainer(rcid uint64) (bool, error) {
	return _Controller.Contract.ExistContainer(&_Controller.CallOpts, rcid)
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eid) view returns(bool)
func (_Controller *ControllerCaller) ExistEvent(opts *bind.CallOpts, eid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "existEvent", eid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eid) view returns(bool)
func (_Controller *ControllerSession) ExistEvent(eid uint64) (bool, error) {
	return _Controller.Contract.ExistEvent(&_Controller.CallOpts, eid)
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eid) view returns(bool)
func (_Controller *ControllerCallerSession) ExistEvent(eid uint64) (bool, error) {
	return _Controller.Contract.ExistEvent(&_Controller.CallOpts, eid)
}

// GetActiveApplications is a free data retrieval call binding the contract method 0x935ef3ad.
//
// Solidity: function getActiveApplications() view returns(uint64[])
func (_Controller *ControllerCaller) GetActiveApplications(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getActiveApplications")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetActiveApplications is a free data retrieval call binding the contract method 0x935ef3ad.
//
// Solidity: function getActiveApplications() view returns(uint64[])
func (_Controller *ControllerSession) GetActiveApplications() ([]uint64, error) {
	return _Controller.Contract.GetActiveApplications(&_Controller.CallOpts)
}

// GetActiveApplications is a free data retrieval call binding the contract method 0x935ef3ad.
//
// Solidity: function getActiveApplications() view returns(uint64[])
func (_Controller *ControllerCallerSession) GetActiveApplications() ([]uint64, error) {
	return _Controller.Contract.GetActiveApplications(&_Controller.CallOpts)
}

// GetActiveContainers is a free data retrieval call binding the contract method 0x087e9448.
//
// Solidity: function getActiveContainers() view returns(uint64[])
func (_Controller *ControllerCaller) GetActiveContainers(opts *bind.CallOpts) ([]uint64, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getActiveContainers")

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetActiveContainers is a free data retrieval call binding the contract method 0x087e9448.
//
// Solidity: function getActiveContainers() view returns(uint64[])
func (_Controller *ControllerSession) GetActiveContainers() ([]uint64, error) {
	return _Controller.Contract.GetActiveContainers(&_Controller.CallOpts)
}

// GetActiveContainers is a free data retrieval call binding the contract method 0x087e9448.
//
// Solidity: function getActiveContainers() view returns(uint64[])
func (_Controller *ControllerCallerSession) GetActiveContainers() ([]uint64, error) {
	return _Controller.Contract.GetActiveContainers(&_Controller.CallOpts)
}

// GetApplicationContainers is a free data retrieval call binding the contract method 0x934557b7.
//
// Solidity: function getApplicationContainers(uint64 appid) view returns(uint64[])
func (_Controller *ControllerCaller) GetApplicationContainers(opts *bind.CallOpts, appid uint64) ([]uint64, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getApplicationContainers", appid)

	if err != nil {
		return *new([]uint64), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint64)).(*[]uint64)

	return out0, err

}

// GetApplicationContainers is a free data retrieval call binding the contract method 0x934557b7.
//
// Solidity: function getApplicationContainers(uint64 appid) view returns(uint64[])
func (_Controller *ControllerSession) GetApplicationContainers(appid uint64) ([]uint64, error) {
	return _Controller.Contract.GetApplicationContainers(&_Controller.CallOpts, appid)
}

// GetApplicationContainers is a free data retrieval call binding the contract method 0x934557b7.
//
// Solidity: function getApplicationContainers(uint64 appid) view returns(uint64[])
func (_Controller *ControllerCallerSession) GetApplicationContainers(appid uint64) ([]uint64, error) {
	return _Controller.Contract.GetApplicationContainers(&_Controller.CallOpts, appid)
}

// GetContainerInstances is a free data retrieval call binding the contract method 0xb099ab69.
//
// Solidity: function getContainerInstances(uint64 rcid) view returns((address,uint256)[])
func (_Controller *ControllerCaller) GetContainerInstances(opts *bind.CallOpts, rcid uint64) ([]DCRContainerInstance, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getContainerInstances", rcid)

	if err != nil {
		return *new([]DCRContainerInstance), err
	}

	out0 := *abi.ConvertType(out[0], new([]DCRContainerInstance)).(*[]DCRContainerInstance)

	return out0, err

}

// GetContainerInstances is a free data retrieval call binding the contract method 0xb099ab69.
//
// Solidity: function getContainerInstances(uint64 rcid) view returns((address,uint256)[])
func (_Controller *ControllerSession) GetContainerInstances(rcid uint64) ([]DCRContainerInstance, error) {
	return _Controller.Contract.GetContainerInstances(&_Controller.CallOpts, rcid)
}

// GetContainerInstances is a free data retrieval call binding the contract method 0xb099ab69.
//
// Solidity: function getContainerInstances(uint64 rcid) view returns((address,uint256)[])
func (_Controller *ControllerCallerSession) GetContainerInstances(rcid uint64) ([]DCRContainerInstance, error) {
	return _Controller.Contract.GetContainerInstances(&_Controller.CallOpts, rcid)
}

// GetEventReply is a free data retrieval call binding the contract method 0x0bce037d.
//
// Solidity: function getEventReply(uint64 eid, uint64 index) view returns(address, (address,string)[], uint256)
func (_Controller *ControllerCaller) GetEventReply(opts *bind.CallOpts, eid uint64, index uint64) (common.Address, []DELReputationScore, *big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getEventReply", eid, index)

	if err != nil {
		return *new(common.Address), *new([]DELReputationScore), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new([]DELReputationScore)).(*[]DELReputationScore)
	out2 := *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return out0, out1, out2, err

}

// GetEventReply is a free data retrieval call binding the contract method 0x0bce037d.
//
// Solidity: function getEventReply(uint64 eid, uint64 index) view returns(address, (address,string)[], uint256)
func (_Controller *ControllerSession) GetEventReply(eid uint64, index uint64) (common.Address, []DELReputationScore, *big.Int, error) {
	return _Controller.Contract.GetEventReply(&_Controller.CallOpts, eid, index)
}

// GetEventReply is a free data retrieval call binding the contract method 0x0bce037d.
//
// Solidity: function getEventReply(uint64 eid, uint64 index) view returns(address, (address,string)[], uint256)
func (_Controller *ControllerCallerSession) GetEventReply(eid uint64, index uint64) (common.Address, []DELReputationScore, *big.Int, error) {
	return _Controller.Contract.GetEventReply(&_Controller.CallOpts, eid, index)
}

// GetEventReplyCount is a free data retrieval call binding the contract method 0xc14d22e6.
//
// Solidity: function getEventReplyCount(uint64 eid) view returns(uint256)
func (_Controller *ControllerCaller) GetEventReplyCount(opts *bind.CallOpts, eid uint64) (*big.Int, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getEventReplyCount", eid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEventReplyCount is a free data retrieval call binding the contract method 0xc14d22e6.
//
// Solidity: function getEventReplyCount(uint64 eid) view returns(uint256)
func (_Controller *ControllerSession) GetEventReplyCount(eid uint64) (*big.Int, error) {
	return _Controller.Contract.GetEventReplyCount(&_Controller.CallOpts, eid)
}

// GetEventReplyCount is a free data retrieval call binding the contract method 0xc14d22e6.
//
// Solidity: function getEventReplyCount(uint64 eid) view returns(uint256)
func (_Controller *ControllerCallerSession) GetEventReplyCount(eid uint64) (*big.Int, error) {
	return _Controller.Contract.GetEventReplyCount(&_Controller.CallOpts, eid)
}

// GetRegisteredNodes is a free data retrieval call binding the contract method 0xcf8c6f52.
//
// Solidity: function getRegisteredNodes() view returns(address[])
func (_Controller *ControllerCaller) GetRegisteredNodes(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "getRegisteredNodes")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRegisteredNodes is a free data retrieval call binding the contract method 0xcf8c6f52.
//
// Solidity: function getRegisteredNodes() view returns(address[])
func (_Controller *ControllerSession) GetRegisteredNodes() ([]common.Address, error) {
	return _Controller.Contract.GetRegisteredNodes(&_Controller.CallOpts)
}

// GetRegisteredNodes is a free data retrieval call binding the contract method 0xcf8c6f52.
//
// Solidity: function getRegisteredNodes() view returns(address[])
func (_Controller *ControllerCallerSession) GetRegisteredNodes() ([]common.Address, error) {
	return _Controller.Contract.GetRegisteredNodes(&_Controller.CallOpts)
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) HasAlreadyReplied(opts *bind.CallOpts, eid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasAlreadyReplied", eid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) HasAlreadyReplied(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyReplied(&_Controller.CallOpts, eid, nodeAddr)
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) HasAlreadyReplied(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyReplied(&_Controller.CallOpts, eid, nodeAddr)
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) HasAlreadyVoted(opts *bind.CallOpts, eid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasAlreadyVoted", eid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) HasAlreadyVoted(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyVoted(&_Controller.CallOpts, eid, nodeAddr)
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) HasAlreadyVoted(eid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyVoted(&_Controller.CallOpts, eid, nodeAddr)
}

// HasRequiredCount is a free data retrieval call binding the contract method 0x8a36c7ff.
//
// Solidity: function hasRequiredCount(uint8 th, uint64 count) view returns(bool)
func (_Controller *ControllerCaller) HasRequiredCount(opts *bind.CallOpts, th uint8, count uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "hasRequiredCount", th, count)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRequiredCount is a free data retrieval call binding the contract method 0x8a36c7ff.
//
// Solidity: function hasRequiredCount(uint8 th, uint64 count) view returns(bool)
func (_Controller *ControllerSession) HasRequiredCount(th uint8, count uint64) (bool, error) {
	return _Controller.Contract.HasRequiredCount(&_Controller.CallOpts, th, count)
}

// HasRequiredCount is a free data retrieval call binding the contract method 0x8a36c7ff.
//
// Solidity: function hasRequiredCount(uint8 th, uint64 count) view returns(bool)
func (_Controller *ControllerCallerSession) HasRequiredCount(th uint8, count uint64) (bool, error) {
	return _Controller.Contract.HasRequiredCount(&_Controller.CallOpts, th, count)
}

// IsApplicationActive is a free data retrieval call binding the contract method 0xdea65678.
//
// Solidity: function isApplicationActive(uint64 appid) view returns(bool)
func (_Controller *ControllerCaller) IsApplicationActive(opts *bind.CallOpts, appid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isApplicationActive", appid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApplicationActive is a free data retrieval call binding the contract method 0xdea65678.
//
// Solidity: function isApplicationActive(uint64 appid) view returns(bool)
func (_Controller *ControllerSession) IsApplicationActive(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationActive(&_Controller.CallOpts, appid)
}

// IsApplicationActive is a free data retrieval call binding the contract method 0xdea65678.
//
// Solidity: function isApplicationActive(uint64 appid) view returns(bool)
func (_Controller *ControllerCallerSession) IsApplicationActive(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationActive(&_Controller.CallOpts, appid)
}

// IsApplicationOwner is a free data retrieval call binding the contract method 0x938ea596.
//
// Solidity: function isApplicationOwner(uint64 appid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) IsApplicationOwner(opts *bind.CallOpts, appid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isApplicationOwner", appid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApplicationOwner is a free data retrieval call binding the contract method 0x938ea596.
//
// Solidity: function isApplicationOwner(uint64 appid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) IsApplicationOwner(appid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsApplicationOwner(&_Controller.CallOpts, appid, nodeAddr)
}

// IsApplicationOwner is a free data retrieval call binding the contract method 0x938ea596.
//
// Solidity: function isApplicationOwner(uint64 appid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) IsApplicationOwner(appid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsApplicationOwner(&_Controller.CallOpts, appid, nodeAddr)
}

// IsApplicationUnregistered is a free data retrieval call binding the contract method 0x90d8229c.
//
// Solidity: function isApplicationUnregistered(uint64 appid) view returns(bool)
func (_Controller *ControllerCaller) IsApplicationUnregistered(opts *bind.CallOpts, appid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isApplicationUnregistered", appid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApplicationUnregistered is a free data retrieval call binding the contract method 0x90d8229c.
//
// Solidity: function isApplicationUnregistered(uint64 appid) view returns(bool)
func (_Controller *ControllerSession) IsApplicationUnregistered(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationUnregistered(&_Controller.CallOpts, appid)
}

// IsApplicationUnregistered is a free data retrieval call binding the contract method 0x90d8229c.
//
// Solidity: function isApplicationUnregistered(uint64 appid) view returns(bool)
func (_Controller *ControllerCallerSession) IsApplicationUnregistered(appid uint64) (bool, error) {
	return _Controller.Contract.IsApplicationUnregistered(&_Controller.CallOpts, appid)
}

// IsContainerActive is a free data retrieval call binding the contract method 0xa168a279.
//
// Solidity: function isContainerActive(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerActive(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerActive", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerActive is a free data retrieval call binding the contract method 0xa168a279.
//
// Solidity: function isContainerActive(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerActive(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerActive(&_Controller.CallOpts, rcid)
}

// IsContainerActive is a free data retrieval call binding the contract method 0xa168a279.
//
// Solidity: function isContainerActive(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerActive(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerActive(&_Controller.CallOpts, rcid)
}

// IsContainerAutodeployed is a free data retrieval call binding the contract method 0xc786e940.
//
// Solidity: function isContainerAutodeployed(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerAutodeployed(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerAutodeployed", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerAutodeployed is a free data retrieval call binding the contract method 0xc786e940.
//
// Solidity: function isContainerAutodeployed(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerAutodeployed(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerAutodeployed(&_Controller.CallOpts, rcid)
}

// IsContainerAutodeployed is a free data retrieval call binding the contract method 0xc786e940.
//
// Solidity: function isContainerAutodeployed(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerAutodeployed(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerAutodeployed(&_Controller.CallOpts, rcid)
}

// IsContainerHost is a free data retrieval call binding the contract method 0xd4d458a2.
//
// Solidity: function isContainerHost(uint64 rcid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) IsContainerHost(opts *bind.CallOpts, rcid uint64, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerHost", rcid, nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerHost is a free data retrieval call binding the contract method 0xd4d458a2.
//
// Solidity: function isContainerHost(uint64 rcid, address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) IsContainerHost(rcid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsContainerHost(&_Controller.CallOpts, rcid, nodeAddr)
}

// IsContainerHost is a free data retrieval call binding the contract method 0xd4d458a2.
//
// Solidity: function isContainerHost(uint64 rcid, address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerHost(rcid uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsContainerHost(&_Controller.CallOpts, rcid, nodeAddr)
}

// IsContainerUnregistered is a free data retrieval call binding the contract method 0x8f784dbe.
//
// Solidity: function isContainerUnregistered(uint64 rcid) view returns(bool)
func (_Controller *ControllerCaller) IsContainerUnregistered(opts *bind.CallOpts, rcid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isContainerUnregistered", rcid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsContainerUnregistered is a free data retrieval call binding the contract method 0x8f784dbe.
//
// Solidity: function isContainerUnregistered(uint64 rcid) view returns(bool)
func (_Controller *ControllerSession) IsContainerUnregistered(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerUnregistered(&_Controller.CallOpts, rcid)
}

// IsContainerUnregistered is a free data retrieval call binding the contract method 0x8f784dbe.
//
// Solidity: function isContainerUnregistered(uint64 rcid) view returns(bool)
func (_Controller *ControllerCallerSession) IsContainerUnregistered(rcid uint64) (bool, error) {
	return _Controller.Contract.IsContainerUnregistered(&_Controller.CallOpts, rcid)
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eid) view returns(bool)
func (_Controller *ControllerCaller) IsEventSolved(opts *bind.CallOpts, eid uint64) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isEventSolved", eid)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eid) view returns(bool)
func (_Controller *ControllerSession) IsEventSolved(eid uint64) (bool, error) {
	return _Controller.Contract.IsEventSolved(&_Controller.CallOpts, eid)
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eid) view returns(bool)
func (_Controller *ControllerCallerSession) IsEventSolved(eid uint64) (bool, error) {
	return _Controller.Contract.IsEventSolved(&_Controller.CallOpts, eid)
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) view returns(bool)
func (_Controller *ControllerCaller) IsNodeRegistered(opts *bind.CallOpts, nodeAddr common.Address) (bool, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "isNodeRegistered", nodeAddr)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) view returns(bool)
func (_Controller *ControllerSession) IsNodeRegistered(nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsNodeRegistered(&_Controller.CallOpts, nodeAddr)
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) view returns(bool)
func (_Controller *ControllerCallerSession) IsNodeRegistered(nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsNodeRegistered(&_Controller.CallOpts, nodeAddr)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_Controller *ControllerCaller) Nodes(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "nodes", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_Controller *ControllerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _Controller.Contract.Nodes(&_Controller.CallOpts, arg0)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) view returns(address)
func (_Controller *ControllerCallerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _Controller.Contract.Nodes(&_Controller.CallOpts, arg0)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint64 nodeCount, uint64 nextEventId, uint64 nextAppId, uint64 nextCtrId, uint256 deployedAt)
func (_Controller *ControllerCaller) State(opts *bind.CallOpts) (struct {
	NodeCount   uint64
	NextEventId uint64
	NextAppId   uint64
	NextCtrId   uint64
	DeployedAt  *big.Int
}, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "state")

	outstruct := new(struct {
		NodeCount   uint64
		NextEventId uint64
		NextAppId   uint64
		NextCtrId   uint64
		DeployedAt  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NodeCount = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.NextEventId = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.NextAppId = *abi.ConvertType(out[2], new(uint64)).(*uint64)
	outstruct.NextCtrId = *abi.ConvertType(out[3], new(uint64)).(*uint64)
	outstruct.DeployedAt = *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint64 nodeCount, uint64 nextEventId, uint64 nextAppId, uint64 nextCtrId, uint256 deployedAt)
func (_Controller *ControllerSession) State() (struct {
	NodeCount   uint64
	NextEventId uint64
	NextAppId   uint64
	NextCtrId   uint64
	DeployedAt  *big.Int
}, error) {
	return _Controller.Contract.State(&_Controller.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() view returns(uint64 nodeCount, uint64 nextEventId, uint64 nextAppId, uint64 nextCtrId, uint256 deployedAt)
func (_Controller *ControllerCallerSession) State() (struct {
	NodeCount   uint64
	NextEventId uint64
	NextAppId   uint64
	NextCtrId   uint64
	DeployedAt  *big.Int
}, error) {
	return _Controller.Contract.State(&_Controller.CallOpts)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0xc51b7ef7.
//
// Solidity: function registerApplication(string appInfo, string[] ctrInfos, bool autodeploy) returns()
func (_Controller *ControllerTransactor) RegisterApplication(opts *bind.TransactOpts, appInfo string, ctrInfos []string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "registerApplication", appInfo, ctrInfos, autodeploy)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0xc51b7ef7.
//
// Solidity: function registerApplication(string appInfo, string[] ctrInfos, bool autodeploy) returns()
func (_Controller *ControllerSession) RegisterApplication(appInfo string, ctrInfos []string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.Contract.RegisterApplication(&_Controller.TransactOpts, appInfo, ctrInfos, autodeploy)
}

// RegisterApplication is a paid mutator transaction binding the contract method 0xc51b7ef7.
//
// Solidity: function registerApplication(string appInfo, string[] ctrInfos, bool autodeploy) returns()
func (_Controller *ControllerTransactorSession) RegisterApplication(appInfo string, ctrInfos []string, autodeploy bool) (*types.Transaction, error) {
	return _Controller.Contract.RegisterApplication(&_Controller.TransactOpts, appInfo, ctrInfos, autodeploy)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerTransactor) RegisterNode(opts *bind.TransactOpts, specs string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "registerNode", specs)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerSession) RegisterNode(specs string) (*types.Transaction, error) {
	return _Controller.Contract.RegisterNode(&_Controller.TransactOpts, specs)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerTransactorSession) RegisterNode(specs string) (*types.Transaction, error) {
	return _Controller.Contract.RegisterNode(&_Controller.TransactOpts, specs)
}

// SendEvent is a paid mutator transaction binding the contract method 0x54ad53c5.
//
// Solidity: function sendEvent(string _eType, uint64 _rcid) returns()
func (_Controller *ControllerTransactor) SendEvent(opts *bind.TransactOpts, _eType string, _rcid uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "sendEvent", _eType, _rcid)
}

// SendEvent is a paid mutator transaction binding the contract method 0x54ad53c5.
//
// Solidity: function sendEvent(string _eType, uint64 _rcid) returns()
func (_Controller *ControllerSession) SendEvent(_eType string, _rcid uint64) (*types.Transaction, error) {
	return _Controller.Contract.SendEvent(&_Controller.TransactOpts, _eType, _rcid)
}

// SendEvent is a paid mutator transaction binding the contract method 0x54ad53c5.
//
// Solidity: function sendEvent(string _eType, uint64 _rcid) returns()
func (_Controller *ControllerTransactorSession) SendEvent(_eType string, _rcid uint64) (*types.Transaction, error) {
	return _Controller.Contract.SendEvent(&_Controller.TransactOpts, _eType, _rcid)
}

// SendReply is a paid mutator transaction binding the contract method 0xb9234ac4.
//
// Solidity: function sendReply(uint64 eid, (address,string)[] _repScores) returns()
func (_Controller *ControllerTransactor) SendReply(opts *bind.TransactOpts, eid uint64, _repScores []DELReputationScore) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "sendReply", eid, _repScores)
}

// SendReply is a paid mutator transaction binding the contract method 0xb9234ac4.
//
// Solidity: function sendReply(uint64 eid, (address,string)[] _repScores) returns()
func (_Controller *ControllerSession) SendReply(eid uint64, _repScores []DELReputationScore) (*types.Transaction, error) {
	return _Controller.Contract.SendReply(&_Controller.TransactOpts, eid, _repScores)
}

// SendReply is a paid mutator transaction binding the contract method 0xb9234ac4.
//
// Solidity: function sendReply(uint64 eid, (address,string)[] _repScores) returns()
func (_Controller *ControllerTransactorSession) SendReply(eid uint64, _repScores []DELReputationScore) (*types.Transaction, error) {
	return _Controller.Contract.SendReply(&_Controller.TransactOpts, eid, _repScores)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x83038ac2.
//
// Solidity: function solveEvent(uint64 eid) returns()
func (_Controller *ControllerTransactor) SolveEvent(opts *bind.TransactOpts, eid uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "solveEvent", eid)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x83038ac2.
//
// Solidity: function solveEvent(uint64 eid) returns()
func (_Controller *ControllerSession) SolveEvent(eid uint64) (*types.Transaction, error) {
	return _Controller.Contract.SolveEvent(&_Controller.TransactOpts, eid)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x83038ac2.
//
// Solidity: function solveEvent(uint64 eid) returns()
func (_Controller *ControllerTransactorSession) SolveEvent(eid uint64) (*types.Transaction, error) {
	return _Controller.Contract.SolveEvent(&_Controller.TransactOpts, eid)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eid, address candidateAddr) returns()
func (_Controller *ControllerTransactor) VoteSolver(opts *bind.TransactOpts, eid uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "voteSolver", eid, candidateAddr)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eid, address candidateAddr) returns()
func (_Controller *ControllerSession) VoteSolver(eid uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.Contract.VoteSolver(&_Controller.TransactOpts, eid, candidateAddr)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eid, address candidateAddr) returns()
func (_Controller *ControllerTransactorSession) VoteSolver(eid uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.Contract.VoteSolver(&_Controller.TransactOpts, eid, candidateAddr)
}

// ControllerApplicationRegisteredIterator is returned from FilterApplicationRegistered and is used to iterate over the raw logs and unpacked data for ApplicationRegistered events raised by the Controller contract.
type ControllerApplicationRegisteredIterator struct {
	Event *ControllerApplicationRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerApplicationRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerApplicationRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerApplicationRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerApplicationRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerApplicationRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerApplicationRegistered represents a ApplicationRegistered event raised by the Controller contract.
type ControllerApplicationRegistered struct {
	Appid uint64
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterApplicationRegistered is a free log retrieval operation binding the contract event 0x2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e.
//
// Solidity: event ApplicationRegistered(uint64 appid)
func (_Controller *ControllerFilterer) FilterApplicationRegistered(opts *bind.FilterOpts) (*ControllerApplicationRegisteredIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ApplicationRegistered")
	if err != nil {
		return nil, err
	}
	return &ControllerApplicationRegisteredIterator{contract: _Controller.contract, event: "ApplicationRegistered", logs: logs, sub: sub}, nil
}

// WatchApplicationRegistered is a free log subscription operation binding the contract event 0x2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e.
//
// Solidity: event ApplicationRegistered(uint64 appid)
func (_Controller *ControllerFilterer) WatchApplicationRegistered(opts *bind.WatchOpts, sink chan<- *ControllerApplicationRegistered) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ApplicationRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerApplicationRegistered)
				if err := _Controller.contract.UnpackLog(event, "ApplicationRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApplicationRegistered is a log parse operation binding the contract event 0x2e97ddfc4422509a4d2cfb3e6cbfa2801e8c43c009e48f8f705cfdb961ef7f8e.
//
// Solidity: event ApplicationRegistered(uint64 appid)
func (_Controller *ControllerFilterer) ParseApplicationRegistered(log types.Log) (*ControllerApplicationRegistered, error) {
	event := new(ControllerApplicationRegistered)
	if err := _Controller.contract.UnpackLog(event, "ApplicationRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerContainerRegisteredIterator is returned from FilterContainerRegistered and is used to iterate over the raw logs and unpacked data for ContainerRegistered events raised by the Controller contract.
type ControllerContainerRegisteredIterator struct {
	Event *ControllerContainerRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerContainerRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerContainerRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerContainerRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerContainerRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerContainerRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerContainerRegistered represents a ContainerRegistered event raised by the Controller contract.
type ControllerContainerRegistered struct {
	Rcid uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContainerRegistered is a free log retrieval operation binding the contract event 0x8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee20.
//
// Solidity: event ContainerRegistered(uint64 rcid)
func (_Controller *ControllerFilterer) FilterContainerRegistered(opts *bind.FilterOpts) (*ControllerContainerRegisteredIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ContainerRegistered")
	if err != nil {
		return nil, err
	}
	return &ControllerContainerRegisteredIterator{contract: _Controller.contract, event: "ContainerRegistered", logs: logs, sub: sub}, nil
}

// WatchContainerRegistered is a free log subscription operation binding the contract event 0x8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee20.
//
// Solidity: event ContainerRegistered(uint64 rcid)
func (_Controller *ControllerFilterer) WatchContainerRegistered(opts *bind.WatchOpts, sink chan<- *ControllerContainerRegistered) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ContainerRegistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerContainerRegistered)
				if err := _Controller.contract.UnpackLog(event, "ContainerRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContainerRegistered is a log parse operation binding the contract event 0x8482a138408ff0b239d3c618735ba139a0cb25c0ef43e86fa3799c5fc8f4ee20.
//
// Solidity: event ContainerRegistered(uint64 rcid)
func (_Controller *ControllerFilterer) ParseContainerRegistered(log types.Log) (*ControllerContainerRegistered, error) {
	event := new(ControllerContainerRegistered)
	if err := _Controller.contract.UnpackLog(event, "ContainerRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerContainerUnregisteredIterator is returned from FilterContainerUnregistered and is used to iterate over the raw logs and unpacked data for ContainerUnregistered events raised by the Controller contract.
type ControllerContainerUnregisteredIterator struct {
	Event *ControllerContainerUnregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerContainerUnregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerContainerUnregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerContainerUnregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerContainerUnregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerContainerUnregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerContainerUnregistered represents a ContainerUnregistered event raised by the Controller contract.
type ControllerContainerUnregistered struct {
	Rcid uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContainerUnregistered is a free log retrieval operation binding the contract event 0x1233fb0c32d384803219b9ff98429a393a3e7bf55401c3491e3361d7913f960b.
//
// Solidity: event ContainerUnregistered(uint64 rcid)
func (_Controller *ControllerFilterer) FilterContainerUnregistered(opts *bind.FilterOpts) (*ControllerContainerUnregisteredIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ContainerUnregistered")
	if err != nil {
		return nil, err
	}
	return &ControllerContainerUnregisteredIterator{contract: _Controller.contract, event: "ContainerUnregistered", logs: logs, sub: sub}, nil
}

// WatchContainerUnregistered is a free log subscription operation binding the contract event 0x1233fb0c32d384803219b9ff98429a393a3e7bf55401c3491e3361d7913f960b.
//
// Solidity: event ContainerUnregistered(uint64 rcid)
func (_Controller *ControllerFilterer) WatchContainerUnregistered(opts *bind.WatchOpts, sink chan<- *ControllerContainerUnregistered) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ContainerUnregistered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerContainerUnregistered)
				if err := _Controller.contract.UnpackLog(event, "ContainerUnregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContainerUnregistered is a log parse operation binding the contract event 0x1233fb0c32d384803219b9ff98429a393a3e7bf55401c3491e3361d7913f960b.
//
// Solidity: event ContainerUnregistered(uint64 rcid)
func (_Controller *ControllerFilterer) ParseContainerUnregistered(log types.Log) (*ControllerContainerUnregistered, error) {
	event := new(ControllerContainerUnregistered)
	if err := _Controller.contract.UnpackLog(event, "ContainerUnregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerContainerUpdatedIterator is returned from FilterContainerUpdated and is used to iterate over the raw logs and unpacked data for ContainerUpdated events raised by the Controller contract.
type ControllerContainerUpdatedIterator struct {
	Event *ControllerContainerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerContainerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerContainerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerContainerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerContainerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerContainerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerContainerUpdated represents a ContainerUpdated event raised by the Controller contract.
type ControllerContainerUpdated struct {
	Rcid uint64
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterContainerUpdated is a free log retrieval operation binding the contract event 0x786b7b9748bcc4f47869dc619e12836e5f883f087caeed5e066821041d90dc4f.
//
// Solidity: event ContainerUpdated(uint64 rcid)
func (_Controller *ControllerFilterer) FilterContainerUpdated(opts *bind.FilterOpts) (*ControllerContainerUpdatedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ContainerUpdated")
	if err != nil {
		return nil, err
	}
	return &ControllerContainerUpdatedIterator{contract: _Controller.contract, event: "ContainerUpdated", logs: logs, sub: sub}, nil
}

// WatchContainerUpdated is a free log subscription operation binding the contract event 0x786b7b9748bcc4f47869dc619e12836e5f883f087caeed5e066821041d90dc4f.
//
// Solidity: event ContainerUpdated(uint64 rcid)
func (_Controller *ControllerFilterer) WatchContainerUpdated(opts *bind.WatchOpts, sink chan<- *ControllerContainerUpdated) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ContainerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerContainerUpdated)
				if err := _Controller.contract.UnpackLog(event, "ContainerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseContainerUpdated is a log parse operation binding the contract event 0x786b7b9748bcc4f47869dc619e12836e5f883f087caeed5e066821041d90dc4f.
//
// Solidity: event ContainerUpdated(uint64 rcid)
func (_Controller *ControllerFilterer) ParseContainerUpdated(log types.Log) (*ControllerContainerUpdated, error) {
	event := new(ControllerContainerUpdated)
	if err := _Controller.contract.UnpackLog(event, "ContainerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerEventSolvedIterator is returned from FilterEventSolved and is used to iterate over the raw logs and unpacked data for EventSolved events raised by the Controller contract.
type ControllerEventSolvedIterator struct {
	Event *ControllerEventSolved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerEventSolvedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerEventSolved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerEventSolved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerEventSolvedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerEventSolvedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerEventSolved represents a EventSolved event raised by the Controller contract.
type ControllerEventSolved struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEventSolved is a free log retrieval operation binding the contract event 0x9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc.
//
// Solidity: event EventSolved(uint64 eid)
func (_Controller *ControllerFilterer) FilterEventSolved(opts *bind.FilterOpts) (*ControllerEventSolvedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "EventSolved")
	if err != nil {
		return nil, err
	}
	return &ControllerEventSolvedIterator{contract: _Controller.contract, event: "EventSolved", logs: logs, sub: sub}, nil
}

// WatchEventSolved is a free log subscription operation binding the contract event 0x9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc.
//
// Solidity: event EventSolved(uint64 eid)
func (_Controller *ControllerFilterer) WatchEventSolved(opts *bind.WatchOpts, sink chan<- *ControllerEventSolved) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "EventSolved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerEventSolved)
				if err := _Controller.contract.UnpackLog(event, "EventSolved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventSolved is a log parse operation binding the contract event 0x9e7d4b3b93db4b422f349a8acb5018f0bd4862bf22ebb7de9122e9a9d589fcbc.
//
// Solidity: event EventSolved(uint64 eid)
func (_Controller *ControllerFilterer) ParseEventSolved(log types.Log) (*ControllerEventSolved, error) {
	event := new(ControllerEventSolved)
	if err := _Controller.contract.UnpackLog(event, "EventSolved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerNewEventIterator is returned from FilterNewEvent and is used to iterate over the raw logs and unpacked data for NewEvent events raised by the Controller contract.
type ControllerNewEventIterator struct {
	Event *ControllerNewEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerNewEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerNewEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerNewEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerNewEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerNewEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerNewEvent represents a NewEvent event raised by the Controller contract.
type ControllerNewEvent struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterNewEvent is a free log retrieval operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eid)
func (_Controller *ControllerFilterer) FilterNewEvent(opts *bind.FilterOpts) (*ControllerNewEventIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "NewEvent")
	if err != nil {
		return nil, err
	}
	return &ControllerNewEventIterator{contract: _Controller.contract, event: "NewEvent", logs: logs, sub: sub}, nil
}

// WatchNewEvent is a free log subscription operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eid)
func (_Controller *ControllerFilterer) WatchNewEvent(opts *bind.WatchOpts, sink chan<- *ControllerNewEvent) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "NewEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerNewEvent)
				if err := _Controller.contract.UnpackLog(event, "NewEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEvent is a log parse operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eid)
func (_Controller *ControllerFilterer) ParseNewEvent(log types.Log) (*ControllerNewEvent, error) {
	event := new(ControllerNewEvent)
	if err := _Controller.contract.UnpackLog(event, "NewEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerRequiredRepliesIterator is returned from FilterRequiredReplies and is used to iterate over the raw logs and unpacked data for RequiredReplies events raised by the Controller contract.
type ControllerRequiredRepliesIterator struct {
	Event *ControllerRequiredReplies // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerRequiredRepliesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerRequiredReplies)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerRequiredReplies)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerRequiredRepliesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerRequiredRepliesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerRequiredReplies represents a RequiredReplies event raised by the Controller contract.
type ControllerRequiredReplies struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequiredReplies is a free log retrieval operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eid)
func (_Controller *ControllerFilterer) FilterRequiredReplies(opts *bind.FilterOpts) (*ControllerRequiredRepliesIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "RequiredReplies")
	if err != nil {
		return nil, err
	}
	return &ControllerRequiredRepliesIterator{contract: _Controller.contract, event: "RequiredReplies", logs: logs, sub: sub}, nil
}

// WatchRequiredReplies is a free log subscription operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eid)
func (_Controller *ControllerFilterer) WatchRequiredReplies(opts *bind.WatchOpts, sink chan<- *ControllerRequiredReplies) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "RequiredReplies")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerRequiredReplies)
				if err := _Controller.contract.UnpackLog(event, "RequiredReplies", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequiredReplies is a log parse operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eid)
func (_Controller *ControllerFilterer) ParseRequiredReplies(log types.Log) (*ControllerRequiredReplies, error) {
	event := new(ControllerRequiredReplies)
	if err := _Controller.contract.UnpackLog(event, "RequiredReplies", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerRequiredVotesIterator is returned from FilterRequiredVotes and is used to iterate over the raw logs and unpacked data for RequiredVotes events raised by the Controller contract.
type ControllerRequiredVotesIterator struct {
	Event *ControllerRequiredVotes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerRequiredVotesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerRequiredVotes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerRequiredVotes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerRequiredVotesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerRequiredVotesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerRequiredVotes represents a RequiredVotes event raised by the Controller contract.
type ControllerRequiredVotes struct {
	Eid uint64
	Raw types.Log // Blockchain specific contextual infos
}

// FilterRequiredVotes is a free log retrieval operation binding the contract event 0xd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b.
//
// Solidity: event RequiredVotes(uint64 eid)
func (_Controller *ControllerFilterer) FilterRequiredVotes(opts *bind.FilterOpts) (*ControllerRequiredVotesIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "RequiredVotes")
	if err != nil {
		return nil, err
	}
	return &ControllerRequiredVotesIterator{contract: _Controller.contract, event: "RequiredVotes", logs: logs, sub: sub}, nil
}

// WatchRequiredVotes is a free log subscription operation binding the contract event 0xd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b.
//
// Solidity: event RequiredVotes(uint64 eid)
func (_Controller *ControllerFilterer) WatchRequiredVotes(opts *bind.WatchOpts, sink chan<- *ControllerRequiredVotes) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "RequiredVotes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerRequiredVotes)
				if err := _Controller.contract.UnpackLog(event, "RequiredVotes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequiredVotes is a log parse operation binding the contract event 0xd60036eae6ca348546363e77ae213c133703350bf3acdefc3b0d3dea84c57b7b.
//
// Solidity: event RequiredVotes(uint64 eid)
func (_Controller *ControllerFilterer) ParseRequiredVotes(log types.Log) (*ControllerRequiredVotes, error) {
	event := new(ControllerRequiredVotes)
	if err := _Controller.contract.UnpackLog(event, "RequiredVotes", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
