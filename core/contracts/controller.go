// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EventReply is an auto generated low-level Go binding around an user-defined struct.
type EventReply struct {
	Sender    common.Address
	NodeState string
	CreatedAt uint64
	Voters    []common.Address
}

// ControllerABI is the input ABI used to generate the binding from.
const ControllerABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"EventSolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"}],\"name\":\"NewEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"}],\"name\":\"RequiredReplies\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"name\":\"RequiredVotes\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"canSolveEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"events\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"dynType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"solvedAt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"}],\"name\":\"existEvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"faucet\",\"outputs\":[{\"internalType\":\"contractFaucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"}],\"name\":\"getEventReplies\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"nodeState\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"createdAt\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"internalType\":\"structEvent.Reply[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"hasAlreadyReplied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"hasAlreadyVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"reputation\",\"type\":\"int64\"}],\"name\":\"hasNodeReputation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"}],\"name\":\"isEventSolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nodeAddr\",\"type\":\"address\"}],\"name\":\"isNodeRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nodes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"specs\",\"type\":\"string\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dynType\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_createdAt\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_nodeState\",\"type\":\"string\"}],\"name\":\"sendEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_nodeState\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"_createdAt\",\"type\":\"uint64\"}],\"name\":\"sendReply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_solvedAt\",\"type\":\"uint64\"}],\"name\":\"solveEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nodeCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nextEventId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"eventId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"candidateAddr\",\"type\":\"address\"}],\"name\":\"voteSolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ControllerBin is the compiled bytecode used for deploying new contracts.
var ControllerBin = ""

// DeployController deploys a new Ethereum contract, binding an instance of Controller to it.
func DeployController(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Controller, error) {
	parsed, err := abi.JSON(strings.NewReader(ControllerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ControllerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// Controller is an auto generated Go binding around an Ethereum contract.
type Controller struct {
	ControllerCaller     // Read-only binding to the contract
	ControllerTransactor // Write-only binding to the contract
	ControllerFilterer   // Log filterer for contract events
}

// ControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ControllerSession struct {
	Contract     *Controller       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ControllerCallerSession struct {
	Contract *ControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ControllerTransactorSession struct {
	Contract     *ControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ControllerRaw struct {
	Contract *Controller // Generic contract binding to access the raw methods on
}

// ControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ControllerCallerRaw struct {
	Contract *ControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ControllerTransactorRaw struct {
	Contract *ControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewController creates a new instance of Controller, bound to a specific deployed contract.
func NewController(address common.Address, backend bind.ContractBackend) (*Controller, error) {
	contract, err := bindController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// NewControllerCaller creates a new read-only instance of Controller, bound to a specific deployed contract.
func NewControllerCaller(address common.Address, caller bind.ContractCaller) (*ControllerCaller, error) {
	contract, err := bindController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerCaller{contract: contract}, nil
}

// NewControllerTransactor creates a new write-only instance of Controller, bound to a specific deployed contract.
func NewControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ControllerTransactor, error) {
	contract, err := bindController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerTransactor{contract: contract}, nil
}

// NewControllerFilterer creates a new log filterer instance of Controller, bound to a specific deployed contract.
func NewControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ControllerFilterer, error) {
	contract, err := bindController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ControllerFilterer{contract: contract}, nil
}

// bindController binds a generic wrapper to an already deployed contract.
func bindController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ControllerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.ControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transact(opts, method, params...)
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerCaller) CanSolveEvent(opts *bind.CallOpts, eventId uint64, nodeAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "canSolveEvent", eventId, nodeAddr)
	return *ret0, err
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerSession) CanSolveEvent(eventId uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.CanSolveEvent(&_Controller.CallOpts, eventId, nodeAddr)
}

// CanSolveEvent is a free data retrieval call binding the contract method 0x2ffdaa53.
//
// Solidity: function canSolveEvent(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerCallerSession) CanSolveEvent(eventId uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.CanSolveEvent(&_Controller.CallOpts, eventId, nodeAddr)
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) constant returns(string dynType, address sender, uint64 createdAt, address solver, uint64 solvedAt)
func (_Controller *ControllerCaller) Events(opts *bind.CallOpts, arg0 uint64) (struct {
	DynType   string
	Sender    common.Address
	CreatedAt uint64
	Solver    common.Address
	SolvedAt  uint64
}, error) {
	ret := new(struct {
		DynType   string
		Sender    common.Address
		CreatedAt uint64
		Solver    common.Address
		SolvedAt  uint64
	})
	out := ret
	err := _Controller.contract.Call(opts, out, "events", arg0)
	return *ret, err
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) constant returns(string dynType, address sender, uint64 createdAt, address solver, uint64 solvedAt)
func (_Controller *ControllerSession) Events(arg0 uint64) (struct {
	DynType   string
	Sender    common.Address
	CreatedAt uint64
	Solver    common.Address
	SolvedAt  uint64
}, error) {
	return _Controller.Contract.Events(&_Controller.CallOpts, arg0)
}

// Events is a free data retrieval call binding the contract method 0xe818beb3.
//
// Solidity: function events(uint64 ) constant returns(string dynType, address sender, uint64 createdAt, address solver, uint64 solvedAt)
func (_Controller *ControllerCallerSession) Events(arg0 uint64) (struct {
	DynType   string
	Sender    common.Address
	CreatedAt uint64
	Solver    common.Address
	SolvedAt  uint64
}, error) {
	return _Controller.Contract.Events(&_Controller.CallOpts, arg0)
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eventId) constant returns(bool)
func (_Controller *ControllerCaller) ExistEvent(opts *bind.CallOpts, eventId uint64) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "existEvent", eventId)
	return *ret0, err
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eventId) constant returns(bool)
func (_Controller *ControllerSession) ExistEvent(eventId uint64) (bool, error) {
	return _Controller.Contract.ExistEvent(&_Controller.CallOpts, eventId)
}

// ExistEvent is a free data retrieval call binding the contract method 0xe0e2a31b.
//
// Solidity: function existEvent(uint64 eventId) constant returns(bool)
func (_Controller *ControllerCallerSession) ExistEvent(eventId uint64) (bool, error) {
	return _Controller.Contract.ExistEvent(&_Controller.CallOpts, eventId)
}

// Faucet is a free data retrieval call binding the contract method 0xde5f72fd.
//
// Solidity: function faucet() constant returns(address)
func (_Controller *ControllerCaller) Faucet(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "faucet")
	return *ret0, err
}

// Faucet is a free data retrieval call binding the contract method 0xde5f72fd.
//
// Solidity: function faucet() constant returns(address)
func (_Controller *ControllerSession) Faucet() (common.Address, error) {
	return _Controller.Contract.Faucet(&_Controller.CallOpts)
}

// Faucet is a free data retrieval call binding the contract method 0xde5f72fd.
//
// Solidity: function faucet() constant returns(address)
func (_Controller *ControllerCallerSession) Faucet() (common.Address, error) {
	return _Controller.Contract.Faucet(&_Controller.CallOpts)
}

// GetEventReplies is a free data retrieval call binding the contract method 0xe2ded68b.
//
// Solidity: function getEventReplies(uint64 eventId) constant returns([]EventReply)
func (_Controller *ControllerCaller) GetEventReplies(opts *bind.CallOpts, eventId uint64) ([]EventReply, error) {
	var (
		ret0 = new([]EventReply)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "getEventReplies", eventId)
	return *ret0, err
}

// GetEventReplies is a free data retrieval call binding the contract method 0xe2ded68b.
//
// Solidity: function getEventReplies(uint64 eventId) constant returns([]EventReply)
func (_Controller *ControllerSession) GetEventReplies(eventId uint64) ([]EventReply, error) {
	return _Controller.Contract.GetEventReplies(&_Controller.CallOpts, eventId)
}

// GetEventReplies is a free data retrieval call binding the contract method 0xe2ded68b.
//
// Solidity: function getEventReplies(uint64 eventId) constant returns([]EventReply)
func (_Controller *ControllerCallerSession) GetEventReplies(eventId uint64) ([]EventReply, error) {
	return _Controller.Contract.GetEventReplies(&_Controller.CallOpts, eventId)
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerCaller) HasAlreadyReplied(opts *bind.CallOpts, eventId uint64, nodeAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "hasAlreadyReplied", eventId, nodeAddr)
	return *ret0, err
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerSession) HasAlreadyReplied(eventId uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyReplied(&_Controller.CallOpts, eventId, nodeAddr)
}

// HasAlreadyReplied is a free data retrieval call binding the contract method 0x5aaa0e2c.
//
// Solidity: function hasAlreadyReplied(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerCallerSession) HasAlreadyReplied(eventId uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyReplied(&_Controller.CallOpts, eventId, nodeAddr)
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerCaller) HasAlreadyVoted(opts *bind.CallOpts, eventId uint64, nodeAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "hasAlreadyVoted", eventId, nodeAddr)
	return *ret0, err
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerSession) HasAlreadyVoted(eventId uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyVoted(&_Controller.CallOpts, eventId, nodeAddr)
}

// HasAlreadyVoted is a free data retrieval call binding the contract method 0xa3e1e88e.
//
// Solidity: function hasAlreadyVoted(uint64 eventId, address nodeAddr) constant returns(bool)
func (_Controller *ControllerCallerSession) HasAlreadyVoted(eventId uint64, nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.HasAlreadyVoted(&_Controller.CallOpts, eventId, nodeAddr)
}

// HasNodeReputation is a free data retrieval call binding the contract method 0xf8b05eb4.
//
// Solidity: function hasNodeReputation(address nodeAddr, int64 reputation) constant returns(bool)
func (_Controller *ControllerCaller) HasNodeReputation(opts *bind.CallOpts, nodeAddr common.Address, reputation int64) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "hasNodeReputation", nodeAddr, reputation)
	return *ret0, err
}

// HasNodeReputation is a free data retrieval call binding the contract method 0xf8b05eb4.
//
// Solidity: function hasNodeReputation(address nodeAddr, int64 reputation) constant returns(bool)
func (_Controller *ControllerSession) HasNodeReputation(nodeAddr common.Address, reputation int64) (bool, error) {
	return _Controller.Contract.HasNodeReputation(&_Controller.CallOpts, nodeAddr, reputation)
}

// HasNodeReputation is a free data retrieval call binding the contract method 0xf8b05eb4.
//
// Solidity: function hasNodeReputation(address nodeAddr, int64 reputation) constant returns(bool)
func (_Controller *ControllerCallerSession) HasNodeReputation(nodeAddr common.Address, reputation int64) (bool, error) {
	return _Controller.Contract.HasNodeReputation(&_Controller.CallOpts, nodeAddr, reputation)
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eventId) constant returns(bool)
func (_Controller *ControllerCaller) IsEventSolved(opts *bind.CallOpts, eventId uint64) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "isEventSolved", eventId)
	return *ret0, err
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eventId) constant returns(bool)
func (_Controller *ControllerSession) IsEventSolved(eventId uint64) (bool, error) {
	return _Controller.Contract.IsEventSolved(&_Controller.CallOpts, eventId)
}

// IsEventSolved is a free data retrieval call binding the contract method 0x1c9b9628.
//
// Solidity: function isEventSolved(uint64 eventId) constant returns(bool)
func (_Controller *ControllerCallerSession) IsEventSolved(eventId uint64) (bool, error) {
	return _Controller.Contract.IsEventSolved(&_Controller.CallOpts, eventId)
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) constant returns(bool)
func (_Controller *ControllerCaller) IsNodeRegistered(opts *bind.CallOpts, nodeAddr common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "isNodeRegistered", nodeAddr)
	return *ret0, err
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) constant returns(bool)
func (_Controller *ControllerSession) IsNodeRegistered(nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsNodeRegistered(&_Controller.CallOpts, nodeAddr)
}

// IsNodeRegistered is a free data retrieval call binding the contract method 0x8cc0ebb5.
//
// Solidity: function isNodeRegistered(address nodeAddr) constant returns(bool)
func (_Controller *ControllerCallerSession) IsNodeRegistered(nodeAddr common.Address) (bool, error) {
	return _Controller.Contract.IsNodeRegistered(&_Controller.CallOpts, nodeAddr)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) constant returns(address)
func (_Controller *ControllerCaller) Nodes(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Controller.contract.Call(opts, out, "nodes", arg0)
	return *ret0, err
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) constant returns(address)
func (_Controller *ControllerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _Controller.Contract.Nodes(&_Controller.CallOpts, arg0)
}

// Nodes is a free data retrieval call binding the contract method 0x189a5a17.
//
// Solidity: function nodes(address ) constant returns(address)
func (_Controller *ControllerCallerSession) Nodes(arg0 common.Address) (common.Address, error) {
	return _Controller.Contract.Nodes(&_Controller.CallOpts, arg0)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() constant returns(uint64 nodeCount, uint64 nextEventId)
func (_Controller *ControllerCaller) State(opts *bind.CallOpts) (struct {
	NodeCount   uint64
	NextEventId uint64
}, error) {
	ret := new(struct {
		NodeCount   uint64
		NextEventId uint64
	})
	out := ret
	err := _Controller.contract.Call(opts, out, "state")
	return *ret, err
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() constant returns(uint64 nodeCount, uint64 nextEventId)
func (_Controller *ControllerSession) State() (struct {
	NodeCount   uint64
	NextEventId uint64
}, error) {
	return _Controller.Contract.State(&_Controller.CallOpts)
}

// State is a free data retrieval call binding the contract method 0xc19d93fb.
//
// Solidity: function state() constant returns(uint64 nodeCount, uint64 nextEventId)
func (_Controller *ControllerCallerSession) State() (struct {
	NodeCount   uint64
	NextEventId uint64
}, error) {
	return _Controller.Contract.State(&_Controller.CallOpts)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerTransactor) RegisterNode(opts *bind.TransactOpts, specs string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "registerNode", specs)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerSession) RegisterNode(specs string) (*types.Transaction, error) {
	return _Controller.Contract.RegisterNode(&_Controller.TransactOpts, specs)
}

// RegisterNode is a paid mutator transaction binding the contract method 0x27c6f43e.
//
// Solidity: function registerNode(string specs) returns()
func (_Controller *ControllerTransactorSession) RegisterNode(specs string) (*types.Transaction, error) {
	return _Controller.Contract.RegisterNode(&_Controller.TransactOpts, specs)
}

// SendEvent is a paid mutator transaction binding the contract method 0xe5462fc0.
//
// Solidity: function sendEvent(string _dynType, uint64 _createdAt, string _nodeState) returns()
func (_Controller *ControllerTransactor) SendEvent(opts *bind.TransactOpts, _dynType string, _createdAt uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "sendEvent", _dynType, _createdAt, _nodeState)
}

// SendEvent is a paid mutator transaction binding the contract method 0xe5462fc0.
//
// Solidity: function sendEvent(string _dynType, uint64 _createdAt, string _nodeState) returns()
func (_Controller *ControllerSession) SendEvent(_dynType string, _createdAt uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.Contract.SendEvent(&_Controller.TransactOpts, _dynType, _createdAt, _nodeState)
}

// SendEvent is a paid mutator transaction binding the contract method 0xe5462fc0.
//
// Solidity: function sendEvent(string _dynType, uint64 _createdAt, string _nodeState) returns()
func (_Controller *ControllerTransactorSession) SendEvent(_dynType string, _createdAt uint64, _nodeState string) (*types.Transaction, error) {
	return _Controller.Contract.SendEvent(&_Controller.TransactOpts, _dynType, _createdAt, _nodeState)
}

// SendReply is a paid mutator transaction binding the contract method 0x3118c4e9.
//
// Solidity: function sendReply(uint64 eventId, string _nodeState, uint64 _createdAt) returns()
func (_Controller *ControllerTransactor) SendReply(opts *bind.TransactOpts, eventId uint64, _nodeState string, _createdAt uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "sendReply", eventId, _nodeState, _createdAt)
}

// SendReply is a paid mutator transaction binding the contract method 0x3118c4e9.
//
// Solidity: function sendReply(uint64 eventId, string _nodeState, uint64 _createdAt) returns()
func (_Controller *ControllerSession) SendReply(eventId uint64, _nodeState string, _createdAt uint64) (*types.Transaction, error) {
	return _Controller.Contract.SendReply(&_Controller.TransactOpts, eventId, _nodeState, _createdAt)
}

// SendReply is a paid mutator transaction binding the contract method 0x3118c4e9.
//
// Solidity: function sendReply(uint64 eventId, string _nodeState, uint64 _createdAt) returns()
func (_Controller *ControllerTransactorSession) SendReply(eventId uint64, _nodeState string, _createdAt uint64) (*types.Transaction, error) {
	return _Controller.Contract.SendReply(&_Controller.TransactOpts, eventId, _nodeState, _createdAt)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x6bde00e8.
//
// Solidity: function solveEvent(uint64 eventId, uint64 _solvedAt) returns()
func (_Controller *ControllerTransactor) SolveEvent(opts *bind.TransactOpts, eventId uint64, _solvedAt uint64) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "solveEvent", eventId, _solvedAt)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x6bde00e8.
//
// Solidity: function solveEvent(uint64 eventId, uint64 _solvedAt) returns()
func (_Controller *ControllerSession) SolveEvent(eventId uint64, _solvedAt uint64) (*types.Transaction, error) {
	return _Controller.Contract.SolveEvent(&_Controller.TransactOpts, eventId, _solvedAt)
}

// SolveEvent is a paid mutator transaction binding the contract method 0x6bde00e8.
//
// Solidity: function solveEvent(uint64 eventId, uint64 _solvedAt) returns()
func (_Controller *ControllerTransactorSession) SolveEvent(eventId uint64, _solvedAt uint64) (*types.Transaction, error) {
	return _Controller.Contract.SolveEvent(&_Controller.TransactOpts, eventId, _solvedAt)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eventId, address candidateAddr) returns()
func (_Controller *ControllerTransactor) VoteSolver(opts *bind.TransactOpts, eventId uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "voteSolver", eventId, candidateAddr)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eventId, address candidateAddr) returns()
func (_Controller *ControllerSession) VoteSolver(eventId uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.Contract.VoteSolver(&_Controller.TransactOpts, eventId, candidateAddr)
}

// VoteSolver is a paid mutator transaction binding the contract method 0x45ebd573.
//
// Solidity: function voteSolver(uint64 eventId, address candidateAddr) returns()
func (_Controller *ControllerTransactorSession) VoteSolver(eventId uint64, candidateAddr common.Address) (*types.Transaction, error) {
	return _Controller.Contract.VoteSolver(&_Controller.TransactOpts, eventId, candidateAddr)
}

// ControllerEventSolvedIterator is returned from FilterEventSolved and is used to iterate over the raw logs and unpacked data for EventSolved events raised by the Controller contract.
type ControllerEventSolvedIterator struct {
	Event *ControllerEventSolved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerEventSolvedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerEventSolved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerEventSolved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerEventSolvedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerEventSolvedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerEventSolved represents a EventSolved event raised by the Controller contract.
type ControllerEventSolved struct {
	EventId uint64
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterEventSolved is a free log retrieval operation binding the contract event 0x043c2996864322fff93e2b0bfd84c173076108f78251d43e51ad454c2e867555.
//
// Solidity: event EventSolved(uint64 eventId, address sender)
func (_Controller *ControllerFilterer) FilterEventSolved(opts *bind.FilterOpts) (*ControllerEventSolvedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "EventSolved")
	if err != nil {
		return nil, err
	}
	return &ControllerEventSolvedIterator{contract: _Controller.contract, event: "EventSolved", logs: logs, sub: sub}, nil
}

// WatchEventSolved is a free log subscription operation binding the contract event 0x043c2996864322fff93e2b0bfd84c173076108f78251d43e51ad454c2e867555.
//
// Solidity: event EventSolved(uint64 eventId, address sender)
func (_Controller *ControllerFilterer) WatchEventSolved(opts *bind.WatchOpts, sink chan<- *ControllerEventSolved) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "EventSolved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerEventSolved)
				if err := _Controller.contract.UnpackLog(event, "EventSolved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEventSolved is a log parse operation binding the contract event 0x043c2996864322fff93e2b0bfd84c173076108f78251d43e51ad454c2e867555.
//
// Solidity: event EventSolved(uint64 eventId, address sender)
func (_Controller *ControllerFilterer) ParseEventSolved(log types.Log) (*ControllerEventSolved, error) {
	event := new(ControllerEventSolved)
	if err := _Controller.contract.UnpackLog(event, "EventSolved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ControllerNewEventIterator is returned from FilterNewEvent and is used to iterate over the raw logs and unpacked data for NewEvent events raised by the Controller contract.
type ControllerNewEventIterator struct {
	Event *ControllerNewEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerNewEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerNewEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerNewEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerNewEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerNewEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerNewEvent represents a NewEvent event raised by the Controller contract.
type ControllerNewEvent struct {
	EventId uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterNewEvent is a free log retrieval operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eventId)
func (_Controller *ControllerFilterer) FilterNewEvent(opts *bind.FilterOpts) (*ControllerNewEventIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "NewEvent")
	if err != nil {
		return nil, err
	}
	return &ControllerNewEventIterator{contract: _Controller.contract, event: "NewEvent", logs: logs, sub: sub}, nil
}

// WatchNewEvent is a free log subscription operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eventId)
func (_Controller *ControllerFilterer) WatchNewEvent(opts *bind.WatchOpts, sink chan<- *ControllerNewEvent) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "NewEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerNewEvent)
				if err := _Controller.contract.UnpackLog(event, "NewEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewEvent is a log parse operation binding the contract event 0x4f1301614702721f5173875636bafbd5559dd7889f3509ba5f78cb1c51d5056c.
//
// Solidity: event NewEvent(uint64 eventId)
func (_Controller *ControllerFilterer) ParseNewEvent(log types.Log) (*ControllerNewEvent, error) {
	event := new(ControllerNewEvent)
	if err := _Controller.contract.UnpackLog(event, "NewEvent", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ControllerRequiredRepliesIterator is returned from FilterRequiredReplies and is used to iterate over the raw logs and unpacked data for RequiredReplies events raised by the Controller contract.
type ControllerRequiredRepliesIterator struct {
	Event *ControllerRequiredReplies // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerRequiredRepliesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerRequiredReplies)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerRequiredReplies)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerRequiredRepliesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerRequiredRepliesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerRequiredReplies represents a RequiredReplies event raised by the Controller contract.
type ControllerRequiredReplies struct {
	EventId uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRequiredReplies is a free log retrieval operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eventId)
func (_Controller *ControllerFilterer) FilterRequiredReplies(opts *bind.FilterOpts) (*ControllerRequiredRepliesIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "RequiredReplies")
	if err != nil {
		return nil, err
	}
	return &ControllerRequiredRepliesIterator{contract: _Controller.contract, event: "RequiredReplies", logs: logs, sub: sub}, nil
}

// WatchRequiredReplies is a free log subscription operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eventId)
func (_Controller *ControllerFilterer) WatchRequiredReplies(opts *bind.WatchOpts, sink chan<- *ControllerRequiredReplies) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "RequiredReplies")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerRequiredReplies)
				if err := _Controller.contract.UnpackLog(event, "RequiredReplies", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequiredReplies is a log parse operation binding the contract event 0x345cfdde122a8c4b3ce8dcc3e80d31314ee6f2e6c7f9572a7cba85c54902e689.
//
// Solidity: event RequiredReplies(uint64 eventId)
func (_Controller *ControllerFilterer) ParseRequiredReplies(log types.Log) (*ControllerRequiredReplies, error) {
	event := new(ControllerRequiredReplies)
	if err := _Controller.contract.UnpackLog(event, "RequiredReplies", log); err != nil {
		return nil, err
	}
	return event, nil
}

// ControllerRequiredVotesIterator is returned from FilterRequiredVotes and is used to iterate over the raw logs and unpacked data for RequiredVotes events raised by the Controller contract.
type ControllerRequiredVotesIterator struct {
	Event *ControllerRequiredVotes // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerRequiredVotesIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerRequiredVotes)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerRequiredVotes)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerRequiredVotesIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerRequiredVotesIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerRequiredVotes represents a RequiredVotes event raised by the Controller contract.
type ControllerRequiredVotes struct {
	EventId uint64
	Solver  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRequiredVotes is a free log retrieval operation binding the contract event 0x72b5c0efd2b008f0dda03a626e00426ab4361a2f1c001fa2174f649cbb9fe911.
//
// Solidity: event RequiredVotes(uint64 eventId, address solver)
func (_Controller *ControllerFilterer) FilterRequiredVotes(opts *bind.FilterOpts) (*ControllerRequiredVotesIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "RequiredVotes")
	if err != nil {
		return nil, err
	}
	return &ControllerRequiredVotesIterator{contract: _Controller.contract, event: "RequiredVotes", logs: logs, sub: sub}, nil
}

// WatchRequiredVotes is a free log subscription operation binding the contract event 0x72b5c0efd2b008f0dda03a626e00426ab4361a2f1c001fa2174f649cbb9fe911.
//
// Solidity: event RequiredVotes(uint64 eventId, address solver)
func (_Controller *ControllerFilterer) WatchRequiredVotes(opts *bind.WatchOpts, sink chan<- *ControllerRequiredVotes) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "RequiredVotes")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerRequiredVotes)
				if err := _Controller.contract.UnpackLog(event, "RequiredVotes", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequiredVotes is a log parse operation binding the contract event 0x72b5c0efd2b008f0dda03a626e00426ab4361a2f1c001fa2174f649cbb9fe911.
//
// Solidity: event RequiredVotes(uint64 eventId, address solver)
func (_Controller *ControllerFilterer) ParseRequiredVotes(log types.Log) (*ControllerRequiredVotes, error) {
	event := new(ControllerRequiredVotes)
	if err := _Controller.contract.UnpackLog(event, "RequiredVotes", log); err != nil {
		return nil, err
	}
	return event, nil
}
